
DriveF103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c14  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000d44  08000d44  00010d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d64  08000d64  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d64  08000d64  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d64  08000d64  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d64  08000d64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d68  08000d68  00010d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000001c  08000d88  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000d88  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029e8  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000093e  00000000  00000000  00022a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000ec6  00000000  00000000  0002336b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000250  00000000  00000000  00024238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d8  00000000  00000000  00024488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003084  00000000  00000000  00024660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003916  00000000  00000000  000276e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009952  00000000  00000000  0002affa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003494c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000794  00000000  00000000  0003499c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d2c 	.word	0x08000d2c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	08000d2c 	.word	0x08000d2c

08000170 <SendEnablePulse>:
//		for (j = 0; j < 255; j++);
//	}
//}

static void SendEnablePulse()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN,GPIO_PINHIGH);
 8000174:	2201      	movs	r2, #1
 8000176:	2108      	movs	r1, #8
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fc41 	bl	8000a00 <GPIO_u8SetPinValue>
	STK_voidDelayMilleSec(3);
 800017e:	2003      	movs	r0, #3
 8000180:	f000 fc8c 	bl	8000a9c <STK_voidDelayMilleSec>
	GPIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN,GPIO_PINLOW);
 8000184:	2200      	movs	r2, #0
 8000186:	2108      	movs	r1, #8
 8000188:	2000      	movs	r0, #0
 800018a:	f000 fc39 	bl	8000a00 <GPIO_u8SetPinValue>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}

08000192 <SetHalfDataPins>:


static void SetHalfDataPins(uint8_t Copy_u8Data)
{
 8000192:	b580      	push	{r7, lr}
 8000194:	b082      	sub	sp, #8
 8000196:	af00      	add	r7, sp, #0
 8000198:	4603      	mov	r3, r0
 800019a:	71fb      	strb	r3, [r7, #7]
	GPIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN4,GET_BIT(Copy_u8Data,0));
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	2110      	movs	r1, #16
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 fc29 	bl	8000a00 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN5,GET_BIT(Copy_u8Data,1));
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	085b      	lsrs	r3, r3, #1
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	f003 0301 	and.w	r3, r3, #1
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	461a      	mov	r2, r3
 80001bc:	2120      	movs	r1, #32
 80001be:	2000      	movs	r0, #0
 80001c0:	f000 fc1e 	bl	8000a00 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN6,GET_BIT(Copy_u8Data,2));
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	089b      	lsrs	r3, r3, #2
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	461a      	mov	r2, r3
 80001d2:	2140      	movs	r1, #64	; 0x40
 80001d4:	2000      	movs	r0, #0
 80001d6:	f000 fc13 	bl	8000a00 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN7,GET_BIT(Copy_u8Data,3));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	08db      	lsrs	r3, r3, #3
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	461a      	mov	r2, r3
 80001e8:	2180      	movs	r1, #128	; 0x80
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 fc08 	bl	8000a00 <GPIO_u8SetPinValue>
	SendEnablePulse();
 80001f0:	f7ff ffbe 	bl	8000170 <SendEnablePulse>
		{
			GPIO_u8SetPinValue(CLCD_u8_DATA_PORT,Local_u8DataBit[Local_u8Itretor],GET_BIT(Copy_u8Data,Local_u8Itretor));
		}
	 *
	 */
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <CLCD_voidSendCommand>:




void CLCD_voidSendCommand(uint8_t Copy_u8Command)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	//Set RS pin to low to command
	GPIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN,GPIO_PINLOW);
 8000206:	2200      	movs	r2, #0
 8000208:	2102      	movs	r1, #2
 800020a:	2000      	movs	r0, #0
 800020c:	f000 fbf8 	bl	8000a00 <GPIO_u8SetPinValue>

	//Set RW pin to low to write
	GPIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN,GPIO_PINLOW);
 8000210:	2200      	movs	r2, #0
 8000212:	2104      	movs	r1, #4
 8000214:	2000      	movs	r0, #0
 8000216:	f000 fbf3 	bl	8000a00 <GPIO_u8SetPinValue>
	SendEnablePulse(void);

#elif CLCD_u8_MODE ==FOUR_BIT

	//Four Most Pins
	SetHalfDataPins(Copy_u8Command>>4);
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	091b      	lsrs	r3, r3, #4
 800021e:	b2db      	uxtb	r3, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f7ff ffb6 	bl	8000192 <SetHalfDataPins>

	//Four Least Pins
	SetHalfDataPins(Copy_u8Command);
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4618      	mov	r0, r3
 800022a:	f7ff ffb2 	bl	8000192 <SetHalfDataPins>

#endif

}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}

08000236 <CLCD_voidSendData>:
void CLCD_voidSendData(uint8_t Copy_u8Data)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	b082      	sub	sp, #8
 800023a:	af00      	add	r7, sp, #0
 800023c:	4603      	mov	r3, r0
 800023e:	71fb      	strb	r3, [r7, #7]
	//Set RS pin to high for data
	GPIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN,GPIO_PINHIGH);
 8000240:	2201      	movs	r2, #1
 8000242:	2102      	movs	r1, #2
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fbdb 	bl	8000a00 <GPIO_u8SetPinValue>

	//Set RW pin to low for write
	GPIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN,GPIO_PINLOW);
 800024a:	2200      	movs	r2, #0
 800024c:	2104      	movs	r1, #4
 800024e:	2000      	movs	r0, #0
 8000250:	f000 fbd6 	bl	8000a00 <GPIO_u8SetPinValue>
	SendEnablePulse();

#elif CLCD_u8_MODE ==FOUR_BIT

	//Four Most Pins
	SetHalfDataPins(Copy_u8Data>>4);
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	091b      	lsrs	r3, r3, #4
 8000258:	b2db      	uxtb	r3, r3
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ff99 	bl	8000192 <SetHalfDataPins>

	//Four Least Pins
	SetHalfDataPins(Copy_u8Data);
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ff95 	bl	8000192 <SetHalfDataPins>

#endif

}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	// delay for more than 30ms
	STK_voidDelayMilleSec(40);
 8000274:	2028      	movs	r0, #40	; 0x28
 8000276:	f000 fc11 	bl	8000a9c <STK_voidDelayMilleSec>
#if CLCD_u8_MODE == EIGHT_BIT
	//Function Set Command : 2 lines , font size : 5x7
	CLCD_voidSendCommand(0b00111000);

#elif CLCD_u8_MODE ==FOUR_BIT
	SetHalfDataPins(0b0010);
 800027a:	2002      	movs	r0, #2
 800027c:	f7ff ff89 	bl	8000192 <SetHalfDataPins>
	SetHalfDataPins(0b0010);
 8000280:	2002      	movs	r0, #2
 8000282:	f7ff ff86 	bl	8000192 <SetHalfDataPins>
	SetHalfDataPins(0b1000);
 8000286:	2008      	movs	r0, #8
 8000288:	f7ff ff83 	bl	8000192 <SetHalfDataPins>

#endif

	// Function Set command : enable Display , Cursor off , Blink Cursor off
	CLCD_voidSendCommand(0b00001100);
 800028c:	200c      	movs	r0, #12
 800028e:	f7ff ffb5 	bl	80001fc <CLCD_voidSendCommand>

	//Clear LCD
	CLCD_voidSendCommand(1);
 8000292:	2001      	movs	r0, #1
 8000294:	f7ff ffb2 	bl	80001fc <CLCD_voidSendCommand>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <CLCD_voidSendString>:

void CLCD_voidSendString(char Copy_u8DataString[])
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	uint8_t string_u8count = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8DataString[string_u8count] != '\0')
 80002a8:	e010      	b.n	80002cc <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(Copy_u8DataString[string_u8count]);
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ffbf 	bl	8000236 <CLCD_voidSendData>
		string_u8count++;
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	3301      	adds	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
		/*INCREAMENT 2nd LINE*/
		if(string_u8count ==16)
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b10      	cmp	r3, #16
 80002c2:	d103      	bne.n	80002cc <CLCD_voidSendString+0x30>
		{
			CLCD_voidGoToXY(0, 1);
 80002c4:	2101      	movs	r1, #1
 80002c6:	2000      	movs	r0, #0
 80002c8:	f000 f80b 	bl	80002e2 <CLCD_voidGoToXY>
	while (Copy_u8DataString[string_u8count] != '\0')
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	4413      	add	r3, r2
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d1e8      	bne.n	80002aa <CLCD_voidSendString+0xe>
//		{
//			CLCD_voidSendCommand(COMMAND_CLEAR_DISPALY);
//
//		}
	}
}
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <CLCD_voidGoToXY>:
}



void CLCD_voidGoToXY(uint8_t Copy_u8XPos,uint8_t Copy_u8YPos)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b084      	sub	sp, #16
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	4603      	mov	r3, r0
 80002ea:	460a      	mov	r2, r1
 80002ec:	71fb      	strb	r3, [r7, #7]
 80002ee:	4613      	mov	r3, r2
 80002f0:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8Add;
	if (Copy_u8XPos<16 && Copy_u8YPos<2)
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b0f      	cmp	r3, #15
 80002f6:	d808      	bhi.n	800030a <CLCD_voidGoToXY+0x28>
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d805      	bhi.n	800030a <CLCD_voidGoToXY+0x28>
	{
		Local_u8Add = Copy_u8YPos*0x40 + Copy_u8XPos;
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	019b      	lsls	r3, r3, #6
 8000302:	b2da      	uxtb	r2, r3
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	4413      	add	r3, r2
 8000308:	73fb      	strb	r3, [r7, #15]
	}
	// Set Bit number 7 for DDRAM address Command
	SET_BIT(Local_u8Add,7);
 800030a:	7bfb      	ldrb	r3, [r7, #15]
 800030c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000310:	73fb      	strb	r3, [r7, #15]

	//Set DDRAM Address Command
	CLCD_voidSendCommand(Local_u8Add);
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff71 	bl	80001fc <CLCD_voidSendCommand>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <AFIO_voidSelectEXTIPort>:
#include "STM32F103x6.h"
#include "AFIO_Private.h"
#include "AFIO_Interface.h"

void AFIO_voidSelectEXTIPort(AFIO_LINE_E AFIO_LINE_NUMBER,AFIO_GPIO_PORT_E GPIO_PORT)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	460a      	mov	r2, r1
 800032e:	71fb      	strb	r3, [r7, #7]
 8000330:	4613      	mov	r3, r2
 8000332:	71bb      	strb	r3, [r7, #6]
	uint8_t LocalErrorStatue = OK ;
 8000334:	2300      	movs	r3, #0
 8000336:	73fb      	strb	r3, [r7, #15]

	/*Enable external interrupt configuration register*/
	if(AFIO_LINE_NUMBER < AFIO_UNVALID && GPIO_PORT < AFIO_INVALIED_PORT)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2b0f      	cmp	r3, #15
 800033c:	d82d      	bhi.n	800039a <AFIO_voidSelectEXTIPort+0x76>
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	2b07      	cmp	r3, #7
 8000342:	d82a      	bhi.n	800039a <AFIO_voidSelectEXTIPort+0x76>
	{
		uint8_t LocalBitNum=((AFIO_LINE_NUMBER % EXTI_PIN_ACCESS_BITS)*EXTI_PIN_ACCESS_BITS);
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 0303 	and.w	r3, r3, #3
 800034a:	b2db      	uxtb	r3, r3
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	73bb      	strb	r3, [r7, #14]
		uint8_t LocalRegNum=(AFIO_LINE_NUMBER/EXTI_PIN_ACCESS_BITS);
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	089b      	lsrs	r3, r3, #2
 8000354:	737b      	strb	r3, [r7, #13]

		(AFIO->EXTICR[LocalRegNum] ) &= (~(AFIO_MASK)<< LocalBitNum) ;
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <AFIO_voidSelectEXTIPort+0x88>)
 8000358:	7b7b      	ldrb	r3, [r7, #13]
 800035a:	3302      	adds	r3, #2
 800035c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000360:	7bbb      	ldrb	r3, [r7, #14]
 8000362:	f06f 010f 	mvn.w	r1, #15
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	4618      	mov	r0, r3
 800036c:	490f      	ldr	r1, [pc, #60]	; (80003ac <AFIO_voidSelectEXTIPort+0x88>)
 800036e:	7b7b      	ldrb	r3, [r7, #13]
 8000370:	4002      	ands	r2, r0
 8000372:	3302      	adds	r3, #2
 8000374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		(AFIO->EXTICR[LocalRegNum] ) |= GPIO_PORT<< LocalBitNum ;
 8000378:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <AFIO_voidSelectEXTIPort+0x88>)
 800037a:	7b7b      	ldrb	r3, [r7, #13]
 800037c:	3302      	adds	r3, #2
 800037e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000382:	79b9      	ldrb	r1, [r7, #6]
 8000384:	7bbb      	ldrb	r3, [r7, #14]
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	4618      	mov	r0, r3
 800038c:	4907      	ldr	r1, [pc, #28]	; (80003ac <AFIO_voidSelectEXTIPort+0x88>)
 800038e:	7b7b      	ldrb	r3, [r7, #13]
 8000390:	4302      	orrs	r2, r0
 8000392:	3302      	adds	r3, #2
 8000394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
 8000398:	e002      	b.n	80003a0 <AFIO_voidSelectEXTIPort+0x7c>
	}
	else
	{
		LocalErrorStatue = NOK;
 800039a:	2301      	movs	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
	}



}
 800039e:	bf00      	nop
 80003a0:	bf00      	nop
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40010000 	.word	0x40010000

080003b0 <EXTI_Init>:
 * @pre
 * @post
 * @param EXTIConfig : pointer to struct for Configuration of EXTI
 */
uint8_t EXTI_Init(EXTI_CONFIG_S* EXTIConfig)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	uint8_t LocalErrorState = OK ;
 80003b8:	2300      	movs	r3, #0
 80003ba:	73fb      	strb	r3, [r7, #15]


	//	EXTI->IMR << (EXTIConfig->EXTI_LINE_NUM)=EXTIConfig->EnableState;


	switch(EXTIConfig->TriggerType)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d036      	beq.n	8000432 <EXTI_Init+0x82>
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	dc4b      	bgt.n	8000460 <EXTI_Init+0xb0>
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d002      	beq.n	80003d2 <EXTI_Init+0x22>
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d018      	beq.n	8000402 <EXTI_Init+0x52>
 80003d0:	e046      	b.n	8000460 <EXTI_Init+0xb0>
	{
	case RISING_EDGE  :SET_BIT(EXTI->RTSR,EXTIConfig->EXTI_LINE_NUM );
 80003d2:	4b38      	ldr	r3, [pc, #224]	; (80004b4 <EXTI_Init+0x104>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7812      	ldrb	r2, [r2, #0]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a34      	ldr	r2, [pc, #208]	; (80004b4 <EXTI_Init+0x104>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	6093      	str	r3, [r2, #8]
	CLR_BIT(EXTI->FTSR,EXTIConfig->EXTI_LINE_NUM ); break;
 80003e8:	4b32      	ldr	r3, [pc, #200]	; (80004b4 <EXTI_Init+0x104>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	7812      	ldrb	r2, [r2, #0]
 80003f0:	4611      	mov	r1, r2
 80003f2:	2201      	movs	r2, #1
 80003f4:	408a      	lsls	r2, r1
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a2e      	ldr	r2, [pc, #184]	; (80004b4 <EXTI_Init+0x104>)
 80003fc:	400b      	ands	r3, r1
 80003fe:	60d3      	str	r3, [r2, #12]
 8000400:	e030      	b.n	8000464 <EXTI_Init+0xb4>
	case FAILING_EDGE :SET_BIT(EXTI->FTSR,EXTIConfig->EXTI_LINE_NUM );
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <EXTI_Init+0x104>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	7812      	ldrb	r2, [r2, #0]
 800040a:	4611      	mov	r1, r2
 800040c:	2201      	movs	r2, #1
 800040e:	408a      	lsls	r2, r1
 8000410:	4611      	mov	r1, r2
 8000412:	4a28      	ldr	r2, [pc, #160]	; (80004b4 <EXTI_Init+0x104>)
 8000414:	430b      	orrs	r3, r1
 8000416:	60d3      	str	r3, [r2, #12]
	CLR_BIT(EXTI->RTSR,EXTIConfig->EXTI_LINE_NUM );break;
 8000418:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <EXTI_Init+0x104>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	7812      	ldrb	r2, [r2, #0]
 8000420:	4611      	mov	r1, r2
 8000422:	2201      	movs	r2, #1
 8000424:	408a      	lsls	r2, r1
 8000426:	43d2      	mvns	r2, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <EXTI_Init+0x104>)
 800042c:	400b      	ands	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
 8000430:	e018      	b.n	8000464 <EXTI_Init+0xb4>
	case ON_CHANGE :
		SET_BIT(EXTI->RTSR,EXTIConfig->EXTI_LINE_NUM ) ;
 8000432:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <EXTI_Init+0x104>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7812      	ldrb	r2, [r2, #0]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	4611      	mov	r1, r2
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <EXTI_Init+0x104>)
 8000444:	430b      	orrs	r3, r1
 8000446:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI->FTSR,EXTIConfig->EXTI_LINE_NUM ) ;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <EXTI_Init+0x104>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7812      	ldrb	r2, [r2, #0]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	4611      	mov	r1, r2
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <EXTI_Init+0x104>)
 800045a:	430b      	orrs	r3, r1
 800045c:	60d3      	str	r3, [r2, #12]
		break;
 800045e:	e001      	b.n	8000464 <EXTI_Init+0xb4>

	default :LocalErrorState = NOK;
 8000460:	2301      	movs	r3, #1
 8000462:	73fb      	strb	r3, [r7, #15]
	}
	switch(EXTIConfig->EnableState)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	789b      	ldrb	r3, [r3, #2]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d00d      	beq.n	8000488 <EXTI_Init+0xd8>
 800046c:	2b01      	cmp	r3, #1
 800046e:	d118      	bne.n	80004a2 <EXTI_Init+0xf2>
	{
	case ENABLE :		SET_BIT(EXTI->IMR,EXTIConfig->EXTI_LINE_NUM);			break;
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <EXTI_Init+0x104>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	7812      	ldrb	r2, [r2, #0]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	4611      	mov	r1, r2
 8000480:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <EXTI_Init+0x104>)
 8000482:	430b      	orrs	r3, r1
 8000484:	6013      	str	r3, [r2, #0]
 8000486:	e00f      	b.n	80004a8 <EXTI_Init+0xf8>
	case UNENABLE :		CLR_BIT(EXTI->IMR,EXTIConfig->EXTI_LINE_NUM);			break;
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <EXTI_Init+0x104>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	4611      	mov	r1, r2
 8000492:	2201      	movs	r2, #1
 8000494:	408a      	lsls	r2, r1
 8000496:	43d2      	mvns	r2, r2
 8000498:	4611      	mov	r1, r2
 800049a:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <EXTI_Init+0x104>)
 800049c:	400b      	ands	r3, r1
 800049e:	6013      	str	r3, [r2, #0]
 80004a0:	e002      	b.n	80004a8 <EXTI_Init+0xf8>
	default:			LocalErrorState=NOK;									break;
 80004a2:	2301      	movs	r3, #1
 80004a4:	73fb      	strb	r3, [r7, #15]
 80004a6:	bf00      	nop
	}

	return LocalErrorState;
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40010400 	.word	0x40010400

080004b8 <EXTI_u8SetCallBack>:
 * @param EXTI_LINE
 * @param Copy_pvCallBackFunc
 * @return LocalErrorState
 */
uint8_t EXTI_u8SetCallBack(EXTI_IRQ_LINE_E EXTI_LINE,void(*Copy_pvCallBackFunc)(void))
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
	uint8_t LocalErrorState = OK ;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]
	if(Copy_pvCallBackFunc != NULL)
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d005      	beq.n	80004da <EXTI_u8SetCallBack+0x22>
	{

		EXTI_pvCallBackFunc[EXTI_LINE] =Copy_pvCallBackFunc;
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4906      	ldr	r1, [pc, #24]	; (80004ec <EXTI_u8SetCallBack+0x34>)
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80004d8:	e001      	b.n	80004de <EXTI_u8SetCallBack+0x26>
	}
	else
	{
		/*********NULL ERROR**********/
		LocalErrorState =NULL_POINTER;
 80004da:	2302      	movs	r3, #2
 80004dc:	73fb      	strb	r3, [r7, #15]
	}

	return LocalErrorState;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000038 	.word	0x20000038

080004f0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ0);
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <EXTI0_IRQHandler+0x1c>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <EXTI0_IRQHandler+0x1c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ0]();
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <EXTI0_IRQHandler+0x20>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4798      	blx	r3

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40010400 	.word	0x40010400
 8000510:	20000038 	.word	0x20000038

08000514 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ1);
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <EXTI1_IRQHandler+0x1c>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <EXTI1_IRQHandler+0x1c>)
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ1]();
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <EXTI1_IRQHandler+0x20>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4798      	blx	r3

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010400 	.word	0x40010400
 8000534:	20000038 	.word	0x20000038

08000538 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ2);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <EXTI2_IRQHandler+0x1c>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <EXTI2_IRQHandler+0x1c>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ2]();
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <EXTI2_IRQHandler+0x20>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4798      	blx	r3

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010400 	.word	0x40010400
 8000558:	20000038 	.word	0x20000038

0800055c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ3);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <EXTI3_IRQHandler+0x1c>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <EXTI3_IRQHandler+0x1c>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ3]();
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <EXTI3_IRQHandler+0x20>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4798      	blx	r3

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40010400 	.word	0x40010400
 800057c:	20000038 	.word	0x20000038

08000580 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

	/*Switch Flag if raised*/
	if(EXTI5_FLAG==Raised)
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	095b      	lsrs	r3, r3, #5
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	2b01      	cmp	r3, #1
 8000590:	d108      	bne.n	80005a4 <EXTI9_5_IRQHandler+0x24>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ5);
 8000592:	4b25      	ldr	r3, [pc, #148]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a24      	ldr	r2, [pc, #144]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ5]();
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <EXTI9_5_IRQHandler+0xac>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4798      	blx	r3
	}
	if(EXTI6_FLAG==Raised)
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	099b      	lsrs	r3, r3, #6
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d108      	bne.n	80005c4 <EXTI9_5_IRQHandler+0x44>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ6);
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005bc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ6]();
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <EXTI9_5_IRQHandler+0xac>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4798      	blx	r3
	}
	if(EXTI7_FLAG==Raised)
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	09db      	lsrs	r3, r3, #7
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d108      	bne.n	80005e4 <EXTI9_5_IRQHandler+0x64>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ7);
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ7]();
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <EXTI9_5_IRQHandler+0xac>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4798      	blx	r3
	}
	if(EXTI8_FLAG==Raised)
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d108      	bne.n	8000604 <EXTI9_5_IRQHandler+0x84>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ8);
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 80005f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ8]();
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <EXTI9_5_IRQHandler+0xac>)
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	4798      	blx	r3
	}
	if(EXTI9_FLAG==Raised)
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b01      	cmp	r3, #1
 8000610:	d108      	bne.n	8000624 <EXTI9_5_IRQHandler+0xa4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ9);
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <EXTI9_5_IRQHandler+0xa8>)
 8000618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800061c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ9]();
 800061e:	4b03      	ldr	r3, [pc, #12]	; (800062c <EXTI9_5_IRQHandler+0xac>)
 8000620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000622:	4798      	blx	r3
	else
	{
		//error
	}

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40010400 	.word	0x40010400
 800062c:	20000038 	.word	0x20000038

08000630 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	/*Switch Flag if raised*/
	if(EXTI10_FLAG==Raised)
 8000634:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	0a9b      	lsrs	r3, r3, #10
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b01      	cmp	r3, #1
 8000640:	d108      	bne.n	8000654 <EXTI15_10_IRQHandler+0x24>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ10);
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/


		EXTI_pvCallBackFunc[EXTI_IRQ10]();
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <EXTI15_10_IRQHandler+0xcc>)
 8000650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000652:	4798      	blx	r3
	}
	if(EXTI11_FLAG==Raised)
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	0adb      	lsrs	r3, r3, #11
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	2b01      	cmp	r3, #1
 8000660:	d108      	bne.n	8000674 <EXTI15_10_IRQHandler+0x44>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ11);
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a24      	ldr	r2, [pc, #144]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800066c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ11]();
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <EXTI15_10_IRQHandler+0xcc>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	4798      	blx	r3
	}
	if(EXTI12_FLAG==Raised)
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	0b1b      	lsrs	r3, r3, #12
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b01      	cmp	r3, #1
 8000680:	d108      	bne.n	8000694 <EXTI15_10_IRQHandler+0x64>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ12);
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800068c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ12]();
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <EXTI15_10_IRQHandler+0xcc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4798      	blx	r3
	}
	if(EXTI13_FLAG==Raised)
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	0b5b      	lsrs	r3, r3, #13
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d108      	bne.n	80006b4 <EXTI15_10_IRQHandler+0x84>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ13);
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 80006a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ac:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ13]();
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <EXTI15_10_IRQHandler+0xcc>)
 80006b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b2:	4798      	blx	r3
	}
	if(EXTI14_FLAG==Raised)
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	0b9b      	lsrs	r3, r3, #14
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d108      	bne.n	80006d4 <EXTI15_10_IRQHandler+0xa4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ14);
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006cc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ14]();
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <EXTI15_10_IRQHandler+0xcc>)
 80006d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d2:	4798      	blx	r3
	}
	if(EXTI15_FLAG==Raised)
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	0bdb      	lsrs	r3, r3, #15
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d108      	bne.n	80006f4 <EXTI15_10_IRQHandler+0xc4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ15);
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <EXTI15_10_IRQHandler+0xc8>)
 80006e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ec:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ15]();
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <EXTI15_10_IRQHandler+0xcc>)
 80006f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f2:	4798      	blx	r3
	}
	else
	{
		//error
	}
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40010400 	.word	0x40010400
 80006fc:	20000038 	.word	0x20000038

08000700 <GET_CRLH_Position>:
/*For peripheral Only :*/

static GPIO_TypeDef_S* GPIOPORT[GPIO_PERIPHERAL_NUM] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};

static uint8_t GET_CRLH_Position(GPIO_PIN_E PINNUM)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
	uint8_t Position =0;
 800070a:	2300      	movs	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]

	switch(PINNUM)
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000714:	f000 80b8 	beq.w	8000888 <GET_CRLH_Position+0x188>
 8000718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800071c:	f300 80b7 	bgt.w	800088e <GET_CRLH_Position+0x18e>
 8000720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000724:	f000 80ad 	beq.w	8000882 <GET_CRLH_Position+0x182>
 8000728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800072c:	f300 80af 	bgt.w	800088e <GET_CRLH_Position+0x18e>
 8000730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000734:	f000 80a2 	beq.w	800087c <GET_CRLH_Position+0x17c>
 8000738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800073c:	f300 80a7 	bgt.w	800088e <GET_CRLH_Position+0x18e>
 8000740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000744:	f000 8097 	beq.w	8000876 <GET_CRLH_Position+0x176>
 8000748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800074c:	f300 809f 	bgt.w	800088e <GET_CRLH_Position+0x18e>
 8000750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000754:	f000 808c 	beq.w	8000870 <GET_CRLH_Position+0x170>
 8000758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800075c:	f300 8097 	bgt.w	800088e <GET_CRLH_Position+0x18e>
 8000760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000764:	f000 8081 	beq.w	800086a <GET_CRLH_Position+0x16a>
 8000768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800076c:	f300 808f 	bgt.w	800088e <GET_CRLH_Position+0x18e>
 8000770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000774:	d076      	beq.n	8000864 <GET_CRLH_Position+0x164>
 8000776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800077a:	f300 8088 	bgt.w	800088e <GET_CRLH_Position+0x18e>
 800077e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000782:	d06c      	beq.n	800085e <GET_CRLH_Position+0x15e>
 8000784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000788:	f300 8081 	bgt.w	800088e <GET_CRLH_Position+0x18e>
 800078c:	2b80      	cmp	r3, #128	; 0x80
 800078e:	d063      	beq.n	8000858 <GET_CRLH_Position+0x158>
 8000790:	2b80      	cmp	r3, #128	; 0x80
 8000792:	dc7c      	bgt.n	800088e <GET_CRLH_Position+0x18e>
 8000794:	2b20      	cmp	r3, #32
 8000796:	dc47      	bgt.n	8000828 <GET_CRLH_Position+0x128>
 8000798:	2b00      	cmp	r3, #0
 800079a:	dd78      	ble.n	800088e <GET_CRLH_Position+0x18e>
 800079c:	3b01      	subs	r3, #1
 800079e:	2b1f      	cmp	r3, #31
 80007a0:	d875      	bhi.n	800088e <GET_CRLH_Position+0x18e>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <GET_CRLH_Position+0xa8>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	0800082f 	.word	0x0800082f
 80007ac:	08000835 	.word	0x08000835
 80007b0:	0800088f 	.word	0x0800088f
 80007b4:	0800083b 	.word	0x0800083b
 80007b8:	0800088f 	.word	0x0800088f
 80007bc:	0800088f 	.word	0x0800088f
 80007c0:	0800088f 	.word	0x0800088f
 80007c4:	08000841 	.word	0x08000841
 80007c8:	0800088f 	.word	0x0800088f
 80007cc:	0800088f 	.word	0x0800088f
 80007d0:	0800088f 	.word	0x0800088f
 80007d4:	0800088f 	.word	0x0800088f
 80007d8:	0800088f 	.word	0x0800088f
 80007dc:	0800088f 	.word	0x0800088f
 80007e0:	0800088f 	.word	0x0800088f
 80007e4:	08000847 	.word	0x08000847
 80007e8:	0800088f 	.word	0x0800088f
 80007ec:	0800088f 	.word	0x0800088f
 80007f0:	0800088f 	.word	0x0800088f
 80007f4:	0800088f 	.word	0x0800088f
 80007f8:	0800088f 	.word	0x0800088f
 80007fc:	0800088f 	.word	0x0800088f
 8000800:	0800088f 	.word	0x0800088f
 8000804:	0800088f 	.word	0x0800088f
 8000808:	0800088f 	.word	0x0800088f
 800080c:	0800088f 	.word	0x0800088f
 8000810:	0800088f 	.word	0x0800088f
 8000814:	0800088f 	.word	0x0800088f
 8000818:	0800088f 	.word	0x0800088f
 800081c:	0800088f 	.word	0x0800088f
 8000820:	0800088f 	.word	0x0800088f
 8000824:	0800084d 	.word	0x0800084d
 8000828:	2b40      	cmp	r3, #64	; 0x40
 800082a:	d012      	beq.n	8000852 <GET_CRLH_Position+0x152>
 800082c:	e02f      	b.n	800088e <GET_CRLH_Position+0x18e>
	{
	case PIN0  :Position=0   ; break;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	e02c      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN1  :Position=4   ; break;
 8000834:	2304      	movs	r3, #4
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	e029      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN2  :Position=8   ; break;
 800083a:	2308      	movs	r3, #8
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e026      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN3  :Position=12  ; break;
 8000840:	230c      	movs	r3, #12
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e023      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN4  :Position=16  ; break;
 8000846:	2310      	movs	r3, #16
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e020      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN5  :Position=20  ; break;
 800084c:	2314      	movs	r3, #20
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	e01d      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN6  :Position=24  ; break;
 8000852:	2318      	movs	r3, #24
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	e01a      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN7  :Position=28  ; break;
 8000858:	231c      	movs	r3, #28
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e017      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN8  :Position=0   ; break;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
 8000862:	e014      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN9  :Position=4   ; break;
 8000864:	2304      	movs	r3, #4
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	e011      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN10 :Position=8   ; break;
 800086a:	2308      	movs	r3, #8
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	e00e      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN11 :Position=12  ; break;
 8000870:	230c      	movs	r3, #12
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e00b      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN12 :Position=16  ; break;
 8000876:	2310      	movs	r3, #16
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e008      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN13 :Position=20  ; break;
 800087c:	2314      	movs	r3, #20
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e005      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN14 :Position=24  ; break;
 8000882:	2318      	movs	r3, #24
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e002      	b.n	800088e <GET_CRLH_Position+0x18e>
	case PIN15 :Position=28  ; break;
 8000888:	231c      	movs	r3, #28
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	bf00      	nop
	}

	return Position;
 800088e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <GPIO_u8PinInit>:
 *
 * Return:	ErrorState , Type:uint8_t
 *
 ******************************************************************************/
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_S* PinConfig)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t LocalErrorStatue=OK ;
 80008a4:	2300      	movs	r3, #0
 80008a6:	75fb      	strb	r3, [r7, #23]
	//Port configuration register low (GPIOx_CRL) config pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  config pins 8 -> 15
	volatile uint32_t* configReg = NULL ;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
	volatile uint8_t PIN = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
	configReg = (PinConfig->PinNumber < PIN8) ? &GPIOPORT[PinConfig->PortNum] ->CRL  : &GPIOPORT[PinConfig->PortNum] ->CRH  ;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	885b      	ldrh	r3, [r3, #2]
 80008b4:	2bff      	cmp	r3, #255	; 0xff
 80008b6:	d806      	bhi.n	80008c6 <GPIO_u8PinInit+0x2a>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b4f      	ldr	r3, [pc, #316]	; (80009fc <GPIO_u8PinInit+0x160>)
 80008c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c4:	e006      	b.n	80008d4 <GPIO_u8PinInit+0x38>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b4b      	ldr	r3, [pc, #300]	; (80009fc <GPIO_u8PinInit+0x160>)
 80008ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d2:	3304      	adds	r3, #4
 80008d4:	613b      	str	r3, [r7, #16]

	// clear CNF[1:0] & MODE[1:0]
	(*configReg) &= ~(0xF << GET_CRLH_Position(PinConfig->PinNumber));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	885b      	ldrh	r3, [r3, #2]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff10 	bl	8000700 <GET_CRLH_Position>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	4093      	lsls	r3, r2
 80008e8:	43da      	mvns	r2, r3
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	401a      	ands	r2, r3
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	601a      	str	r2, [r3, #0]

	//if pin is OUTPUT
	if (PinConfig->Mode == GPIO_Output_PUSHPULL || PinConfig->Mode == GPIO_Output_OPENDRAIN || PinConfig->Mode == GPIO_AF_PP || PinConfig->Mode == GPIO_AF_OD)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d00b      	beq.n	8000914 <GPIO_u8PinInit+0x78>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	2b05      	cmp	r3, #5
 8000902:	d007      	beq.n	8000914 <GPIO_u8PinInit+0x78>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	2b06      	cmp	r3, #6
 800090a:	d003      	beq.n	8000914 <GPIO_u8PinInit+0x78>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	2b07      	cmp	r3, #7
 8000912:	d10f      	bne.n	8000934 <GPIO_u8PinInit+0x98>
	{
		//Set CNF[1:0] & MODE[1:0]
		PIN = (((PinConfig->Mode - 4) << 2) | (PinConfig->Speed)) & 0x0F ;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	3b04      	subs	r3, #4
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	b25a      	sxtb	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	b2db      	uxtb	r3, r3
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e04d      	b.n	80009d0 <GPIO_u8PinInit+0x134>

	}
	//if pin is INPUT
	else //MODE = 00 input mode (reset state)
	{
		if ( (PinConfig->Mode == GPIO_INPUT_Floating) | (PinConfig->Mode == GPIO_ANALOG))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	2b01      	cmp	r3, #1
 800093a:	bf0c      	ite	eq
 800093c:	2301      	moveq	r3, #1
 800093e:	2300      	movne	r3, #0
 8000940:	b2da      	uxtb	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	791b      	ldrb	r3, [r3, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d008      	beq.n	800096a <GPIO_u8PinInit+0xce>
		{
			PIN = (((PinConfig->Mode ) << 2) | (UNUSED)) & 0x0F ;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	791b      	ldrb	r3, [r3, #4]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	f003 030f 	and.w	r3, r3, #15
 8000964:	b2db      	uxtb	r3, r3
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e032      	b.n	80009d0 <GPIO_u8PinInit+0x134>
		}
		else if (PinConfig->Mode == GPIO_INPUT_Floating)//considered as INPUT Floating
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <GPIO_u8PinInit+0xdc>
		{
			PIN = (((GPIO_INPUT_Floating) << 2) | (UNUSED)) & 0x0F ;
 8000972:	2304      	movs	r3, #4
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e02b      	b.n	80009d0 <GPIO_u8PinInit+0x134>
		}
		else // PU PD INPUT
		{
			PIN = (((GPIO_INPUT_PU) << 2) | (UNUSED)) & 0x0F ;
 8000978:	2308      	movs	r3, #8
 800097a:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->Mode == GPIO_INPUT_PU)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	791b      	ldrb	r3, [r3, #4]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d112      	bne.n	80009aa <GPIO_u8PinInit+0x10e>
			{
				//ODR = 1 INPUT Pull Up :Table 20. Port bit configuration table
				GPIOPORT[PinConfig->PortNum] ->ODR  |= PinConfig->PinNumber;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <GPIO_u8PinInit+0x160>)
 800098c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	885b      	ldrh	r3, [r3, #2]
 8000996:	4619      	mov	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <GPIO_u8PinInit+0x160>)
 80009a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	e012      	b.n	80009d0 <GPIO_u8PinInit+0x134>
			}else
			{
				//ODR = 0 INPUT Pull Down :Table 20. Port bit configuration table
				GPIOPORT[PinConfig->PortNum] ->ODR  &= ~(PinConfig->PinNumber);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <GPIO_u8PinInit+0x160>)
 80009b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	885b      	ldrh	r3, [r3, #2]
 80009bc:	43db      	mvns	r3, r3
 80009be:	4619      	mov	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <GPIO_u8PinInit+0x160>)
 80009c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009cc:	400a      	ands	r2, r1
 80009ce:	60da      	str	r2, [r3, #12]
		}

	}

	//Write on CRL or CRH
	(*configReg) |= ( (PIN) << GET_CRLH_Position(PinConfig->PinNumber)) ;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461c      	mov	r4, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	885b      	ldrh	r3, [r3, #2]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe90 	bl	8000700 <GET_CRLH_Position>
 80009e0:	4603      	mov	r3, r0
 80009e2:	fa04 f203 	lsl.w	r2, r4, r3
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	431a      	orrs	r2, r3
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	601a      	str	r2, [r3, #0]

	return LocalErrorStatue ;
 80009f0:	7dfb      	ldrb	r3, [r7, #23]

}
 80009f2:	4618      	mov	r0, r3
 80009f4:	371c      	adds	r7, #28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000000 	.word	0x20000000

08000a00 <GPIO_u8SetPinValue>:
 * 			   3- PinVal_E	 : it's Enum For Switch Value(GPIO_PINHIGH,GPIO_PINLOW)
 * Return:	ErrorState , Type:uint8_t
 *
 ******************************************************************************/
uint8_t GPIO_u8SetPinValue(GPIO_PORT_E PORT ,   GPIO_PIN_E  PIN  , PinVal_E VAL )
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	80bb      	strh	r3, [r7, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	70fb      	strb	r3, [r7, #3]
	uint8_t LocalErrorStatue = OK ;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]

		switch (VAL)
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d008      	beq.n	8000a2e <GPIO_u8SetPinValue+0x2e>
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10d      	bne.n	8000a3c <GPIO_u8SetPinValue+0x3c>
		{
		/*SET & RESER VAL BY BSRR BIT SET REST REGISTERS  */
		case GPIO_PINHIGH :  GPIOPORT[PORT]->BSRR =(uint32_t)PIN;   						break ;
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <GPIO_u8SetPinValue+0x50>)
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	88ba      	ldrh	r2, [r7, #4]
 8000a2a:	611a      	str	r2, [r3, #16]
 8000a2c:	e009      	b.n	8000a42 <GPIO_u8SetPinValue+0x42>
		case GPIO_PINLOW  :  GPIOPORT[PORT]->BRR   =(uint32_t)PIN;							break ;
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <GPIO_u8SetPinValue+0x50>)
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	88ba      	ldrh	r2, [r7, #4]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	e002      	b.n	8000a42 <GPIO_u8SetPinValue+0x42>
		default :LocalErrorStatue = NOK ;													    break ;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	bf00      	nop





	return LocalErrorStatue ;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000

08000a54 <NVICEnable>:
 * @post   :
 * @param  : IRQ Number (IRQNUM_E)
 * @return : LocalErrorStatus
 */
uint8_t NVICEnable (IRQNUM_E IRQ )
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	uint8_t LocalErrorState = OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]

	uint8_t LocalRegisterNum = IRQ/32 ;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	73bb      	strb	r3, [r7, #14]

	uint8_t LocalBitNum = IRQ%32;
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 031f 	and.w	r3, r3, #31
 8000a6e:	737b      	strb	r3, [r7, #13]

	if(IRQ<MAX_IRQ)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b5f      	cmp	r3, #95	; 0x5f
 8000a74:	d808      	bhi.n	8000a88 <NVICEnable+0x34>
	{
		ATOMIC_SET_BIT(NVIC->NVIC_ISER[LocalRegisterNum],LocalBitNum);
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	fa02 f103 	lsl.w	r1, r2, r3
 8000a7e:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <NVICEnable+0x44>)
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
 8000a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a86:	e001      	b.n	8000a8c <NVICEnable+0x38>
	}
	else
	{
		LocalErrorState =NOK;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
	}
	return LocalErrorState;
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <STK_voidDelayMilleSec>:
#include "STK_interface.h"


/*millsec*/
void STK_voidDelayMilleSec(uint32_t Copy_u32DelayMS)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32Value;
	/*Select ClK Source*/
	/*1.Program reload value.*/
	Local_u32Value=Copy_u32DelayMS*1000;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	60fb      	str	r3, [r7, #12]
	STK_LOAD = Local_u32Value;
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <STK_voidDelayMilleSec+0x60>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6013      	str	r3, [r2, #0]
	/*2. Clear current value.*/
	STK_VALUE=0;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <STK_voidDelayMilleSec+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
	/*3. Program Control and Status register*/
	STK_CTRL |= (1<<0);
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <STK_voidDelayMilleSec+0x68>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <STK_voidDelayMilleSec+0x68>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]
	STK_CTRL &= ~(1<<2);
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <STK_voidDelayMilleSec+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <STK_voidDelayMilleSec+0x68>)
 8000ace:	f023 0304 	bic.w	r3, r3, #4
 8000ad2:	6013      	str	r3, [r2, #0]

	while((((STK_CTRL)>>16)&1)==0);
 8000ad4:	bf00      	nop
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <STK_voidDelayMilleSec+0x68>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	0c1b      	lsrs	r3, r3, #16
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f8      	beq.n	8000ad6 <STK_voidDelayMilleSec+0x3a>
	STK_CTRL &= ~(1<<0);
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <STK_voidDelayMilleSec+0x68>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <STK_voidDelayMilleSec+0x68>)
 8000aea:	f023 0301 	bic.w	r3, r3, #1
 8000aee:	6013      	str	r3, [r2, #0]
	
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e014 	.word	0xe000e014
 8000b00:	e000e018 	.word	0xe000e018
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <main>:
void GPIOInit();
void EXTIConfig();
void HandlerPA0();

int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	ClockEnable();
 8000b0e:	f000 f815 	bl	8000b3c <ClockEnable>
	GPIOInit();
 8000b12:	f000 f82d 	bl	8000b70 <GPIOInit>
	EXTIConfig();
 8000b16:	f000 f881 	bl	8000c1c <EXTIConfig>

	CLCD_voidInit();
 8000b1a:	f7ff fba9 	bl	8000270 <CLCD_voidInit>

	uint8_t VALUE = 0 ;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71fb      	strb	r3, [r7, #7]
	CLCD_voidGoToXY(2,0);
 8000b22:	2100      	movs	r1, #0
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff fbdc 	bl	80002e2 <CLCD_voidGoToXY>
	CLCD_voidSendCommand(COMMAND_CLEAR_DISPALY);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff fb66 	bl	80001fc <CLCD_voidSendCommand>
	CLCD_voidSendString("Thread Mode");
 8000b30:	4801      	ldr	r0, [pc, #4]	; (8000b38 <main+0x30>)
 8000b32:	f7ff fbb3 	bl	800029c <CLCD_voidSendString>



while (1);
 8000b36:	e7fe      	b.n	8000b36 <main+0x2e>
 8000b38:	08000d44 	.word	0x08000d44

08000b3c <ClockEnable>:
}
void ClockEnable()
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLCK_EN();
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <ClockEnable+0x30>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <ClockEnable+0x30>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6193      	str	r3, [r2, #24]

	RCC_GPIOB_CLCK_EN();
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <ClockEnable+0x30>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <ClockEnable+0x30>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]

	AFIO_GPIOA_CLCK_EN();
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <ClockEnable+0x30>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <ClockEnable+0x30>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6193      	str	r3, [r2, #24]


}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000

08000b70 <GPIOInit>:
void GPIOInit()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b092      	sub	sp, #72	; 0x48
 8000b74:	af00      	add	r7, sp, #0
	GPIO_PinConfig_S PINS[PINS_NUM] =
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2240      	movs	r2, #64	; 0x40
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f8cd 	bl	8000d1c <memset>
 8000b82:	2301      	movs	r3, #1
 8000b84:	80fb      	strh	r3, [r7, #6]
 8000b86:	2301      	movs	r3, #1
 8000b88:	723b      	strb	r3, [r7, #8]
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	81fb      	strh	r3, [r7, #14]
 8000b8e:	2304      	movs	r3, #4
 8000b90:	743b      	strb	r3, [r7, #16]
 8000b92:	2302      	movs	r3, #2
 8000b94:	747b      	strb	r3, [r7, #17]
 8000b96:	2304      	movs	r3, #4
 8000b98:	82fb      	strh	r3, [r7, #22]
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	763b      	strb	r3, [r7, #24]
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	767b      	strb	r3, [r7, #25]
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	83fb      	strh	r3, [r7, #30]
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	f887 3020 	strb.w	r3, [r7, #32]
 8000bac:	2302      	movs	r3, #2
 8000bae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000bcc:	2302      	movs	r3, #2
 8000bce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000bd2:	2340      	movs	r3, #64	; 0x40
 8000bd4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000be6:	2304      	movs	r3, #4
 8000be8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000bec:	2302      	movs	r3, #2
 8000bee:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41



	};

	for(int counter1 = 0 ; counter1 <PINS_NUM ; counter1++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8000bf6:	e009      	b.n	8000c0c <GPIOInit+0x9c>
		GPIO_u8PinInit(&PINS[counter1]);
 8000bf8:	1d3a      	adds	r2, r7, #4
 8000bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4413      	add	r3, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe4b 	bl	800089c <GPIO_u8PinInit>
	for(int counter1 = 0 ; counter1 <PINS_NUM ; counter1++)
 8000c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c08:	3301      	adds	r3, #1
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8000c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	ddf2      	ble.n	8000bf8 <GPIOInit+0x88>


}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	3748      	adds	r7, #72	; 0x48
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <EXTIConfig>:
void EXTIConfig()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
	NVICEnable(EXTI0_IRQ);
 8000c22:	2006      	movs	r0, #6
 8000c24:	f7ff ff16 	bl	8000a54 <NVICEnable>

	AFIO_voidSelectEXTIPort(AFIO_LINE0, AFIO_PORTA);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fb7a 	bl	8000324 <AFIO_voidSelectEXTIPort>

	EXTI_CONFIG_S PA0 =
 8000c30:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <EXTIConfig+0x3c>)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	4611      	mov	r1, r2
 8000c38:	8019      	strh	r1, [r3, #0]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	0c12      	lsrs	r2, r2, #16
 8000c3e:	701a      	strb	r2, [r3, #0]
			.EXTI_LINE_NUM=EXTI_IRQ0,
			.TriggerType=FAILING_EDGE,
			.EnableState=ENABLE
	};

	EXTI_Init(&PA0);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fbb4 	bl	80003b0 <EXTI_Init>
	EXTI_u8SetCallBack(EXTI_IRQ0, &HandlerPA0);
 8000c48:	4904      	ldr	r1, [pc, #16]	; (8000c5c <EXTIConfig+0x40>)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fc34 	bl	80004b8 <EXTI_u8SetCallBack>


}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	08000d50 	.word	0x08000d50
 8000c5c:	08000c61 	.word	0x08000c61

08000c60 <HandlerPA0>:
void HandlerPA0()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	CLCD_voidSendCommand(COMMAND_CLEAR_DISPALY);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fac9 	bl	80001fc <CLCD_voidSendCommand>
	CLCD_voidSendString("Handler Mode");
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <HandlerPA0+0x1c>)
 8000c6c:	f7ff fb16 	bl	800029c <CLCD_voidSendString>
	CLCD_voidGoToXY(1, 2);
 8000c70:	2102      	movs	r1, #2
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fb35 	bl	80002e2 <CLCD_voidGoToXY>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	08000d54 	.word	0x08000d54

08000c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c84:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	; (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cae:	f000 f811 	bl	8000cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb2:	f7ff ff29 	bl	8000b08 <main>

08000cb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   r0, =_estack
 8000cb8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cc4:	08000d6c 	.word	0x08000d6c
  ldr r2, =_sbss
 8000cc8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ccc:	20000078 	.word	0x20000078

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>
	...

08000cd4 <__libc_init_array>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	4d0c      	ldr	r5, [pc, #48]	; (8000d0c <__libc_init_array+0x38>)
 8000cda:	4c0d      	ldr	r4, [pc, #52]	; (8000d10 <__libc_init_array+0x3c>)
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	10a4      	asrs	r4, r4, #2
 8000ce0:	42a6      	cmp	r6, r4
 8000ce2:	d109      	bne.n	8000cf8 <__libc_init_array+0x24>
 8000ce4:	f000 f822 	bl	8000d2c <_init>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	4d0a      	ldr	r5, [pc, #40]	; (8000d14 <__libc_init_array+0x40>)
 8000cec:	4c0a      	ldr	r4, [pc, #40]	; (8000d18 <__libc_init_array+0x44>)
 8000cee:	1b64      	subs	r4, r4, r5
 8000cf0:	10a4      	asrs	r4, r4, #2
 8000cf2:	42a6      	cmp	r6, r4
 8000cf4:	d105      	bne.n	8000d02 <__libc_init_array+0x2e>
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfc:	4798      	blx	r3
 8000cfe:	3601      	adds	r6, #1
 8000d00:	e7ee      	b.n	8000ce0 <__libc_init_array+0xc>
 8000d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d06:	4798      	blx	r3
 8000d08:	3601      	adds	r6, #1
 8000d0a:	e7f2      	b.n	8000cf2 <__libc_init_array+0x1e>
 8000d0c:	08000d64 	.word	0x08000d64
 8000d10:	08000d64 	.word	0x08000d64
 8000d14:	08000d64 	.word	0x08000d64
 8000d18:	08000d68 	.word	0x08000d68

08000d1c <memset>:
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4402      	add	r2, r0
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d100      	bne.n	8000d26 <memset+0xa>
 8000d24:	4770      	bx	lr
 8000d26:	f803 1b01 	strb.w	r1, [r3], #1
 8000d2a:	e7f9      	b.n	8000d20 <memset+0x4>

08000d2c <_init>:
 8000d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2e:	bf00      	nop
 8000d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d32:	bc08      	pop	{r3}
 8000d34:	469e      	mov	lr, r3
 8000d36:	4770      	bx	lr

08000d38 <_fini>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	bf00      	nop
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr
