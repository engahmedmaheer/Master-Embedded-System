
EXTI Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000601  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a8  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000017f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_1>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_2>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  64:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Enable_INIT>:
#include <util/delay.h>

void Enable_INIT(void)
{
	
	SET_BIT(EXTI_GICR,INT0);
  6c:	8b b7       	in	r24, 0x3b	; 59
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(EXTI_GICR,INT1);
  72:	8b b7       	in	r24, 0x3b	; 59
  74:	80 68       	ori	r24, 0x80	; 128
  76:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(EXTI_GICR,INT2);
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	8b bf       	out	0x3b, r24	; 59
	
	/* Edge IN0*/
	SET_BIT(EXTI_MCUCR,0);
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	81 60       	ori	r24, 0x01	; 1
  82:	85 bf       	out	0x35, r24	; 53
	TOG_BIT(EXTI_MCUCR,1);
  84:	95 b7       	in	r25, 0x35	; 53
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	89 27       	eor	r24, r25
  8a:	85 bf       	out	0x35, r24	; 53
	
	/* Edge IN1*/
	SET_BIT(EXTI_MCUCR,2);
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	85 bf       	out	0x35, r24	; 53
	SET_BIT(EXTI_MCUCR,3);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	88 60       	ori	r24, 0x08	; 8
  96:	85 bf       	out	0x35, r24	; 53
	
	/* Edge IN2*/
	TOG_BIT(EXTI_MCUCSR,6);
  98:	94 b7       	in	r25, 0x34	; 52
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	89 27       	eor	r24, r25
  9e:	84 bf       	out	0x34, r24	; 52
	
	/*Enable PIE (MASK)*/
	EXTI_GICR|=(1<<INT0);
  a0:	8b b7       	in	r24, 0x3b	; 59
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	8b bf       	out	0x3b, r24	; 59
	
	sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <__vector_1>:


/*ISR INT0*/
void __vector_1 (void)	__attribute__((signal));
void __vector_1 (void)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	
	SET_BIT(PORTD,5);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <__vector_1+0x1c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <__vector_1+0x26>
  d0:	00 00       	nop
	_delay_ms(1000);
}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	2f 91       	pop	r18
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_2>:
void __vector_2 (void)	__attribute__((signal));
void __vector_2 (void)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	
		SET_BIT(PORTD,6);
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 e6       	ldi	r24, 0x69	; 105
  fc:	98 e1       	ldi	r25, 0x18	; 24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_2+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_2+0x26>
 108:	00 00       	nop
		_delay_ms(1000);
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_3>:
void __vector_3 (void)	__attribute__((signal));
void __vector_3 (void)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	
		SET_BIT(PORTD,7);
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	82 bb       	out	0x12, r24	; 18
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <__vector_3+0x1c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <__vector_3+0x26>
 140:	00 00       	nop
		_delay_ms(1000);
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <ConfigPins>:
void ConfigPins(void)
{
	SET_BIT(DDRD,5);
 152:	81 b3       	in	r24, 0x11	; 17
 154:	80 62       	ori	r24, 0x20	; 32
 156:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,6);
 158:	81 b3       	in	r24, 0x11	; 17
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,7);
 15e:	81 b3       	in	r24, 0x11	; 17
 160:	80 68       	ori	r24, 0x80	; 128
 162:	81 bb       	out	0x11, r24	; 17
 164:	08 95       	ret

00000166 <main>:
void ConfigPins(void);

int main(void)
{
	
	ConfigPins();
 166:	0e 94 a9 00 	call	0x152	; 0x152 <ConfigPins>


	Enable_INIT();
 16a:	0e 94 36 00 	call	0x6c	; 0x6c <Enable_INIT>
	
    /* Replace with your application code */
    while (1) 
    {
		PORTD=0x00;
 16e:	12 ba       	out	0x12, r1	; 18
 170:	fe cf       	rjmp	.-4      	; 0x16e <main+0x8>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
