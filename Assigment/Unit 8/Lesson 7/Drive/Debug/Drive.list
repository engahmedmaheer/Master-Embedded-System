
Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001000  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001130  08001130  00011130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001150  08001150  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001150  08001150  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001150  08001150  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001150  08001150  00011150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001154  08001154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000024  0800117c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800117c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000039c0  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c78  00000000  00000000  00023a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000012e6  00000000  00000000  000246c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002b8  00000000  00000000  000259b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000240  00000000  00000000  00025c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000148a  00000000  00000000  00025ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003c0b  00000000  00000000  00027332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000b01e  00000000  00000000  0002af3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000980  00000000  00000000  00035f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08001118 	.word	0x08001118

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08001118 	.word	0x08001118

08000170 <EEPROM_voidInit>:

/**
 *
 */
void EEPROM_voidInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	I2C_Config_S I2C1_CFG =
 8000176:	463b      	mov	r3, r7
 8000178:	2220      	movs	r2, #32
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f000 ff9e 	bl	80010be <memset>
 8000182:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <EEPROM_voidInit+0x48>)
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800018a:	82bb      	strh	r3, [r7, #20]
 800018c:	2340      	movs	r3, #64	; 0x40
 800018e:	75bb      	strb	r3, [r7, #22]
 8000190:	2301      	movs	r3, #1
 8000192:	75fb      	strb	r3, [r7, #23]
 8000194:	2301      	movs	r3, #1
 8000196:	763b      	strb	r3, [r7, #24]
 8000198:	2301      	movs	r3, #1
 800019a:	767b      	strb	r3, [r7, #25]
			.I2C_EN_STATUS=I2C_ENABLE,
			.I2C_Interrupt_State=I2C_Polling

	};

	I2C_Init(&I2C1_CFG);
 800019c:	463b      	mov	r3, r7
 800019e:	4618      	mov	r0, r3
 80001a0:	f000 fba0 	bl	80008e4 <I2C_Init>

	RCC_EnableAPB2CLCK(3);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 fe95 	bl	8000ed4 <RCC_EnableAPB2CLCK>
	GPIO_SetI2CPins(I2C_GPIO_ONE_ID);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f000 fb3c 	bl	8000828 <GPIO_SetI2CPins>



}
 80001b0:	bf00      	nop
 80001b2:	3720      	adds	r7, #32
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	000186a0 	.word	0x000186a0

080001bc <EEPROM_Write_Byte>:
 * @param byte
 * @param DataLenght
 * @return
 */
unsigned char EEPROM_Write_Byte(unsigned int memory_address , uint16_t* byte , uint8_t DataLenght)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80001c2:	af02      	add	r7, sp, #8
 80001c4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80001c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80001cc:	6018      	str	r0, [r3, #0]
 80001ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80001d2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80001d6:	6019      	str	r1, [r3, #0]
 80001d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80001dc:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 80001e0:	701a      	strb	r2, [r3, #0]

	uint8_t Count ;

	uint8_t LocalErrorState = OK ;
 80001e2:	2300      	movs	r3, #0
 80001e4:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216

	uint16_t LocalBuffer[256]; // data will send with Address

	LocalBuffer[0]=(uint8_t)(memory_address >> 8 ); //upper byte memory address
 80001e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80001ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	0a1b      	lsrs	r3, r3, #8
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80001fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000200:	801a      	strh	r2, [r3, #0]
	LocalBuffer[1]=(uint8_t)memory_address ;		//lower byte  memory address
 8000202:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000206:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	b2db      	uxtb	r3, r3
 800020e:	b29a      	uxth	r2, r3
 8000210:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000218:	805a      	strh	r2, [r3, #2]

	for( Count =2 ; Count < (DataLenght + 2) ; Count++)
 800021a:	2302      	movs	r3, #2
 800021c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8000220:	e019      	b.n	8000256 <EEPROM_Write_Byte+0x9a>
	{
		LocalBuffer[Count]=byte[Count-2];  //      DATA1 |  DATA0 |ADD1 |ADD0
 8000222:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000226:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800022a:	3b02      	subs	r3, #2
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000232:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000236:	6812      	ldr	r2, [r2, #0]
 8000238:	4413      	add	r3, r2
 800023a:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 800023e:	8819      	ldrh	r1, [r3, #0]
 8000240:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000244:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000248:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for( Count =2 ; Count < (DataLenght + 2) ; Count++)
 800024c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000250:	3301      	adds	r3, #1
 8000252:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8000256:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800025a:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000266:	429a      	cmp	r2, r3
 8000268:	dadb      	bge.n	8000222 <EEPROM_Write_Byte+0x66>
	}

	I2C_Master_Tx(I2C1, EEPROM_SLAVE_ADDRESS, LocalBuffer , (DataLenght+2) , I2C_STOP_CONDITION_ENABLE, START);
 800026a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800026e:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b29b      	uxth	r3, r3
 8000276:	3302      	adds	r3, #2
 8000278:	b29b      	uxth	r3, r3
 800027a:	f107 0214 	add.w	r2, r7, #20
 800027e:	2100      	movs	r1, #0
 8000280:	9101      	str	r1, [sp, #4]
 8000282:	2101      	movs	r1, #1
 8000284:	9100      	str	r1, [sp, #0]
 8000286:	212a      	movs	r1, #42	; 0x2a
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <EEPROM_Write_Byte+0xe0>)
 800028a:	f000 fce7 	bl	8000c5c <I2C_Master_Tx>

	return LocalErrorState ;
 800028e:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216


}
 8000292:	4618      	mov	r0, r3
 8000294:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40005400 	.word	0x40005400

080002a0 <EEPROM_Read_Byte>:
 * @param DataOut
 * @param DataLenght
 * @return
 */
unsigned char EEPROM_Read_Byte(unsigned int address , uint16_t* DataOut , uint8_t DataLenght)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af02      	add	r7, sp, #8
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	4613      	mov	r3, r2
 80002ac:	71fb      	strb	r3, [r7, #7]
	uint16_t LocalBuffer[2] ;

	uint16_t LocalErrorState = OK ;
 80002ae:	2300      	movs	r3, #0
 80002b0:	82fb      	strh	r3, [r7, #22]

	/*Address which I Read*/
	LocalBuffer[0]= (uint8_t)(address>>8);
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	823b      	strh	r3, [r7, #16]
	LocalBuffer[1]= (uint8_t)(address);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	827b      	strh	r3, [r7, #18]

	/*Read Concept*/
	/*1-Write Addresss*/
	I2C_Master_Tx(I2C1, EEPROM_SLAVE_ADDRESS, LocalBuffer, 2, I2C_STOP_CONDITION_DISABLE, START);
 80002c4:	f107 0210 	add.w	r2, r7, #16
 80002c8:	2300      	movs	r3, #0
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	2300      	movs	r3, #0
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2302      	movs	r3, #2
 80002d2:	212a      	movs	r1, #42	; 0x2a
 80002d4:	4809      	ldr	r0, [pc, #36]	; (80002fc <EEPROM_Read_Byte+0x5c>)
 80002d6:	f000 fcc1 	bl	8000c5c <I2C_Master_Tx>

	/*2-Read Data*/
	I2C_Master_Tx(I2C1, EEPROM_SLAVE_ADDRESS, DataOut, DataLenght, I2C_STOP_CONDITION_ENABLE, REPEAT_START);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	2201      	movs	r2, #1
 80002e0:	9201      	str	r2, [sp, #4]
 80002e2:	2201      	movs	r2, #1
 80002e4:	9200      	str	r2, [sp, #0]
 80002e6:	68ba      	ldr	r2, [r7, #8]
 80002e8:	212a      	movs	r1, #42	; 0x2a
 80002ea:	4804      	ldr	r0, [pc, #16]	; (80002fc <EEPROM_Read_Byte+0x5c>)
 80002ec:	f000 fcb6 	bl	8000c5c <I2C_Master_Tx>


	return LocalErrorState ;
 80002f0:	8afb      	ldrh	r3, [r7, #22]
 80002f2:	b2db      	uxtb	r3, r3
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3718      	adds	r7, #24
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40005400 	.word	0x40005400

08000300 <EXTI0_IRQHandler>:

	return LocalErrorState;
}

void EXTI0_IRQHandler()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ0);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI0_IRQHandler+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI0_IRQHandler+0x1c>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ0]();
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI0_IRQHandler+0x20>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4798      	blx	r3

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400
 8000320:	20000040 	.word	0x20000040

08000324 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ1);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI1_IRQHandler+0x1c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <EXTI1_IRQHandler+0x1c>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ1]();
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI1_IRQHandler+0x20>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4798      	blx	r3

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010400 	.word	0x40010400
 8000344:	20000040 	.word	0x20000040

08000348 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ2);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI2_IRQHandler+0x1c>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI2_IRQHandler+0x1c>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ2]();
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI2_IRQHandler+0x20>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4798      	blx	r3

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400
 8000368:	20000040 	.word	0x20000040

0800036c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ3);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI3_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI3_IRQHandler+0x1c>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ3]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI3_IRQHandler+0x20>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4798      	blx	r3

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	20000040 	.word	0x20000040

08000390 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

	/*Switch Flag if raised*/
	if(EXTI5_FLAG==Raised)
 8000394:	4b28      	ldr	r3, [pc, #160]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	095b      	lsrs	r3, r3, #5
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d108      	bne.n	80003b4 <EXTI9_5_IRQHandler+0x24>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ5);
 80003a2:	4b25      	ldr	r3, [pc, #148]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a24      	ldr	r2, [pc, #144]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003a8:	f043 0320 	orr.w	r3, r3, #32
 80003ac:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ5]();
 80003ae:	4b23      	ldr	r3, [pc, #140]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4798      	blx	r3
	}
	if(EXTI6_FLAG==Raised)
 80003b4:	4b20      	ldr	r3, [pc, #128]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	099b      	lsrs	r3, r3, #6
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d108      	bne.n	80003d4 <EXTI9_5_IRQHandler+0x44>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ6);
 80003c2:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003cc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ6]();
 80003ce:	4b1b      	ldr	r3, [pc, #108]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4798      	blx	r3
	}
	if(EXTI7_FLAG==Raised)
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	09db      	lsrs	r3, r3, #7
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d108      	bne.n	80003f4 <EXTI9_5_IRQHandler+0x64>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ7);
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ec:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ7]();
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4798      	blx	r3
	}
	if(EXTI8_FLAG==Raised)
 80003f4:	4b10      	ldr	r3, [pc, #64]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	0a1b      	lsrs	r3, r3, #8
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d108      	bne.n	8000414 <EXTI9_5_IRQHandler+0x84>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ8);
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a0c      	ldr	r2, [pc, #48]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ8]();
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 8000410:	6a1b      	ldr	r3, [r3, #32]
 8000412:	4798      	blx	r3
	}
	if(EXTI9_FLAG==Raised)
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	0a5b      	lsrs	r3, r3, #9
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	2b01      	cmp	r3, #1
 8000420:	d108      	bne.n	8000434 <EXTI9_5_IRQHandler+0xa4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ9);
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ9]();
 800042e:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 8000430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000432:	4798      	blx	r3
	else
	{
		//error
	}

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40010400 	.word	0x40010400
 800043c:	20000040 	.word	0x20000040

08000440 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	/*Switch Flag if raised*/
	if(EXTI10_FLAG==Raised)
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	0a9b      	lsrs	r3, r3, #10
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b01      	cmp	r3, #1
 8000450:	d108      	bne.n	8000464 <EXTI15_10_IRQHandler+0x24>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ10);
 8000452:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a2c      	ldr	r2, [pc, #176]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/


		EXTI_pvCallBackFunc[EXTI_IRQ10]();
 800045e:	4b2b      	ldr	r3, [pc, #172]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 8000460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000462:	4798      	blx	r3
	}
	if(EXTI11_FLAG==Raised)
 8000464:	4b28      	ldr	r3, [pc, #160]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	0adb      	lsrs	r3, r3, #11
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	2b01      	cmp	r3, #1
 8000470:	d108      	bne.n	8000484 <EXTI15_10_IRQHandler+0x44>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ11);
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a24      	ldr	r2, [pc, #144]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800047c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ11]();
 800047e:	4b23      	ldr	r3, [pc, #140]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 8000480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000482:	4798      	blx	r3
	}
	if(EXTI12_FLAG==Raised)
 8000484:	4b20      	ldr	r3, [pc, #128]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	0b1b      	lsrs	r3, r3, #12
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	2b01      	cmp	r3, #1
 8000490:	d108      	bne.n	80004a4 <EXTI15_10_IRQHandler+0x64>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ12);
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800049c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ12]();
 800049e:	4b1b      	ldr	r3, [pc, #108]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	4798      	blx	r3
	}
	if(EXTI13_FLAG==Raised)
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	0b5b      	lsrs	r3, r3, #13
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d108      	bne.n	80004c4 <EXTI15_10_IRQHandler+0x84>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ13);
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a14      	ldr	r2, [pc, #80]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004bc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ13]();
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 80004c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c2:	4798      	blx	r3
	}
	if(EXTI14_FLAG==Raised)
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	0b9b      	lsrs	r3, r3, #14
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d108      	bne.n	80004e4 <EXTI15_10_IRQHandler+0xa4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ14);
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004dc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ14]();
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 80004e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e2:	4798      	blx	r3
	}
	if(EXTI15_FLAG==Raised)
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	0bdb      	lsrs	r3, r3, #15
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d108      	bne.n	8000504 <EXTI15_10_IRQHandler+0xc4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ15);
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a04      	ldr	r2, [pc, #16]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004fc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ15]();
 80004fe:	4b03      	ldr	r3, [pc, #12]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 8000500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000502:	4798      	blx	r3
	}
	else
	{
		//error
	}
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40010400 	.word	0x40010400
 800050c:	20000040 	.word	0x20000040

08000510 <GET_CRLH_Position>:
/*For peripheral Only :*/

static GPIO_TypeDef_S* GPIOPORT[GPIO_PERIPHERAL_NUM] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};

static uint8_t GET_CRLH_Position(GPIO_PIN_E PINNUM)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	80fb      	strh	r3, [r7, #6]
	uint8_t Position =0;
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]

	switch(PINNUM)
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000524:	4293      	cmp	r3, r2
 8000526:	f000 80c4 	beq.w	80006b2 <GET_CRLH_Position+0x1a2>
 800052a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800052e:	f280 80c2 	bge.w	80006b6 <GET_CRLH_Position+0x1a6>
 8000532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000536:	f000 80b9 	beq.w	80006ac <GET_CRLH_Position+0x19c>
 800053a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800053e:	f300 80ba 	bgt.w	80006b6 <GET_CRLH_Position+0x1a6>
 8000542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000546:	f000 80ae 	beq.w	80006a6 <GET_CRLH_Position+0x196>
 800054a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800054e:	f300 80b2 	bgt.w	80006b6 <GET_CRLH_Position+0x1a6>
 8000552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000556:	f000 80a3 	beq.w	80006a0 <GET_CRLH_Position+0x190>
 800055a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800055e:	f300 80aa 	bgt.w	80006b6 <GET_CRLH_Position+0x1a6>
 8000562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000566:	f000 8098 	beq.w	800069a <GET_CRLH_Position+0x18a>
 800056a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800056e:	f300 80a2 	bgt.w	80006b6 <GET_CRLH_Position+0x1a6>
 8000572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000576:	f000 808d 	beq.w	8000694 <GET_CRLH_Position+0x184>
 800057a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800057e:	f300 809a 	bgt.w	80006b6 <GET_CRLH_Position+0x1a6>
 8000582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000586:	f000 8082 	beq.w	800068e <GET_CRLH_Position+0x17e>
 800058a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800058e:	f300 8092 	bgt.w	80006b6 <GET_CRLH_Position+0x1a6>
 8000592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000596:	d077      	beq.n	8000688 <GET_CRLH_Position+0x178>
 8000598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800059c:	f300 808b 	bgt.w	80006b6 <GET_CRLH_Position+0x1a6>
 80005a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005a4:	d06d      	beq.n	8000682 <GET_CRLH_Position+0x172>
 80005a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005aa:	f300 8084 	bgt.w	80006b6 <GET_CRLH_Position+0x1a6>
 80005ae:	2b80      	cmp	r3, #128	; 0x80
 80005b0:	d064      	beq.n	800067c <GET_CRLH_Position+0x16c>
 80005b2:	2b80      	cmp	r3, #128	; 0x80
 80005b4:	dc7f      	bgt.n	80006b6 <GET_CRLH_Position+0x1a6>
 80005b6:	2b20      	cmp	r3, #32
 80005b8:	dc48      	bgt.n	800064c <GET_CRLH_Position+0x13c>
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	dd7b      	ble.n	80006b6 <GET_CRLH_Position+0x1a6>
 80005be:	3b01      	subs	r3, #1
 80005c0:	2b1f      	cmp	r3, #31
 80005c2:	d878      	bhi.n	80006b6 <GET_CRLH_Position+0x1a6>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <GET_CRLH_Position+0xbc>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	08000653 	.word	0x08000653
 80005d0:	08000659 	.word	0x08000659
 80005d4:	080006b7 	.word	0x080006b7
 80005d8:	0800065f 	.word	0x0800065f
 80005dc:	080006b7 	.word	0x080006b7
 80005e0:	080006b7 	.word	0x080006b7
 80005e4:	080006b7 	.word	0x080006b7
 80005e8:	08000665 	.word	0x08000665
 80005ec:	080006b7 	.word	0x080006b7
 80005f0:	080006b7 	.word	0x080006b7
 80005f4:	080006b7 	.word	0x080006b7
 80005f8:	080006b7 	.word	0x080006b7
 80005fc:	080006b7 	.word	0x080006b7
 8000600:	080006b7 	.word	0x080006b7
 8000604:	080006b7 	.word	0x080006b7
 8000608:	0800066b 	.word	0x0800066b
 800060c:	080006b7 	.word	0x080006b7
 8000610:	080006b7 	.word	0x080006b7
 8000614:	080006b7 	.word	0x080006b7
 8000618:	080006b7 	.word	0x080006b7
 800061c:	080006b7 	.word	0x080006b7
 8000620:	080006b7 	.word	0x080006b7
 8000624:	080006b7 	.word	0x080006b7
 8000628:	080006b7 	.word	0x080006b7
 800062c:	080006b7 	.word	0x080006b7
 8000630:	080006b7 	.word	0x080006b7
 8000634:	080006b7 	.word	0x080006b7
 8000638:	080006b7 	.word	0x080006b7
 800063c:	080006b7 	.word	0x080006b7
 8000640:	080006b7 	.word	0x080006b7
 8000644:	080006b7 	.word	0x080006b7
 8000648:	08000671 	.word	0x08000671
 800064c:	2b40      	cmp	r3, #64	; 0x40
 800064e:	d012      	beq.n	8000676 <GET_CRLH_Position+0x166>
	case PIN12 :Position=16  ; break;
	case PIN13 :Position=20  ; break;
	case PIN14 :Position=24  ; break;
	case PIN15 :Position=28  ; break;
	case Allpins:	;break;
	default : ;break;
 8000650:	e031      	b.n	80006b6 <GET_CRLH_Position+0x1a6>
	case PIN0  :Position=0   ; break;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
 8000656:	e02f      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN1  :Position=4   ; break;
 8000658:	2304      	movs	r3, #4
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	e02c      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN2  :Position=8   ; break;
 800065e:	2308      	movs	r3, #8
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	e029      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN3  :Position=12  ; break;
 8000664:	230c      	movs	r3, #12
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e026      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN4  :Position=16  ; break;
 800066a:	2310      	movs	r3, #16
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e023      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN5  :Position=20  ; break;
 8000670:	2314      	movs	r3, #20
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e020      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN6  :Position=24  ; break;
 8000676:	2318      	movs	r3, #24
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e01d      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN7  :Position=28  ; break;
 800067c:	231c      	movs	r3, #28
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e01a      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN8  :Position=0   ; break;
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	e017      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN9  :Position=4   ; break;
 8000688:	2304      	movs	r3, #4
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	e014      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN10 :Position=8   ; break;
 800068e:	2308      	movs	r3, #8
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e011      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN11 :Position=12  ; break;
 8000694:	230c      	movs	r3, #12
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	e00e      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN12 :Position=16  ; break;
 800069a:	2310      	movs	r3, #16
 800069c:	73fb      	strb	r3, [r7, #15]
 800069e:	e00b      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN13 :Position=20  ; break;
 80006a0:	2314      	movs	r3, #20
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e008      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN14 :Position=24  ; break;
 80006a6:	2318      	movs	r3, #24
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e005      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case PIN15 :Position=28  ; break;
 80006ac:	231c      	movs	r3, #28
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e002      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	case Allpins:	;break;
 80006b2:	bf00      	nop
 80006b4:	e000      	b.n	80006b8 <GET_CRLH_Position+0x1a8>
	default : ;break;
 80006b6:	bf00      	nop
	}

	return Position;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]

}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <GPIO_u8PinInit>:
 *
 * Return:	ErrorState , Type:uint8_t
 *
 ******************************************************************************/
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_S* PinConfig)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	uint8_t LocalErrorStatue=OK ;
 80006cc:	2300      	movs	r3, #0
 80006ce:	75fb      	strb	r3, [r7, #23]
	//Port configuration register low (GPIOx_CRL) config pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  config pins 8 -> 15
	volatile uint32_t* configReg = NULL ;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
	volatile uint8_t PIN = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
	configReg = (PinConfig->PinNumber < PIN8) ? &GPIOPORT[PinConfig->PortNum] ->CRL  : &GPIOPORT[PinConfig->PortNum] ->CRH  ;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	885b      	ldrh	r3, [r3, #2]
 80006dc:	2bff      	cmp	r3, #255	; 0xff
 80006de:	d806      	bhi.n	80006ee <GPIO_u8PinInit+0x2a>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b4f      	ldr	r3, [pc, #316]	; (8000824 <GPIO_u8PinInit+0x160>)
 80006e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ec:	e006      	b.n	80006fc <GPIO_u8PinInit+0x38>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <GPIO_u8PinInit+0x160>)
 80006f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006fa:	3304      	adds	r3, #4
 80006fc:	613b      	str	r3, [r7, #16]

	// clear CNF[1:0] & MODE[1:0]
	(*configReg) &= ~(0xF << GET_CRLH_Position(PinConfig->PinNumber));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	885b      	ldrh	r3, [r3, #2]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff04 	bl	8000510 <GET_CRLH_Position>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	230f      	movs	r3, #15
 800070e:	4093      	lsls	r3, r2
 8000710:	43da      	mvns	r2, r3
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	401a      	ands	r2, r3
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	601a      	str	r2, [r3, #0]

	//if pin is OUTPUT
	if (PinConfig->Mode == GPIO_Output_PUSHPULL || PinConfig->Mode == GPIO_Output_OPENDRAIN || PinConfig->Mode == GPIO_AF_PP || PinConfig->Mode == GPIO_AF_OD)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	2b04      	cmp	r3, #4
 8000722:	d00b      	beq.n	800073c <GPIO_u8PinInit+0x78>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	2b05      	cmp	r3, #5
 800072a:	d007      	beq.n	800073c <GPIO_u8PinInit+0x78>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	2b06      	cmp	r3, #6
 8000732:	d003      	beq.n	800073c <GPIO_u8PinInit+0x78>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	2b07      	cmp	r3, #7
 800073a:	d10f      	bne.n	800075c <GPIO_u8PinInit+0x98>
	{
		//Set CNF[1:0] & MODE[1:0]
		PIN = (((PinConfig->Mode - 4) << 2) | (PinConfig->Speed)) & 0x0F ;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	3b04      	subs	r3, #4
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	b25a      	sxtb	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	b25b      	sxtb	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	b25b      	sxtb	r3, r3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e04d      	b.n	80007f8 <GPIO_u8PinInit+0x134>

	}
	//if pin is INPUT
	else //MODE = 00 input mode (reset state)
	{
		if ( (PinConfig->Mode == GPIO_INPUT_Floating) | (PinConfig->Mode == GPIO_ANALOG))
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	2b01      	cmp	r3, #1
 8000762:	bf0c      	ite	eq
 8000764:	2301      	moveq	r3, #1
 8000766:	2300      	movne	r3, #0
 8000768:	b2da      	uxtb	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf0c      	ite	eq
 8000772:	2301      	moveq	r3, #1
 8000774:	2300      	movne	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <GPIO_u8PinInit+0xce>
		{
			PIN = (((PinConfig->Mode ) << 2) | (UNUSED)) & 0x0F ;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	b2db      	uxtb	r3, r3
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e032      	b.n	80007f8 <GPIO_u8PinInit+0x134>
		}
		else if (PinConfig->Mode == GPIO_INPUT_Floating)//considered as INPUT Floating
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d102      	bne.n	80007a0 <GPIO_u8PinInit+0xdc>
		{
			PIN = (((GPIO_INPUT_Floating) << 2) | (UNUSED)) & 0x0F ;
 800079a:	2304      	movs	r3, #4
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	e02b      	b.n	80007f8 <GPIO_u8PinInit+0x134>
		}
		else // PU PD INPUT
		{
			PIN = (((GPIO_INPUT_PU) << 2) | (UNUSED)) & 0x0F ;
 80007a0:	2308      	movs	r3, #8
 80007a2:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->Mode == GPIO_INPUT_PU)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d112      	bne.n	80007d2 <GPIO_u8PinInit+0x10e>
			{
				//ODR = 1 INPUT Pull Up :Table 20. Port bit configuration table
				GPIOPORT[PinConfig->PortNum] ->ODR  |= PinConfig->PinNumber;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <GPIO_u8PinInit+0x160>)
 80007b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b8:	68da      	ldr	r2, [r3, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	885b      	ldrh	r3, [r3, #2]
 80007be:	4619      	mov	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <GPIO_u8PinInit+0x160>)
 80007c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	e012      	b.n	80007f8 <GPIO_u8PinInit+0x134>
			}else
			{
				//ODR = 0 INPUT Pull Down :Table 20. Port bit configuration table
				GPIOPORT[PinConfig->PortNum] ->ODR  &= ~(PinConfig->PinNumber);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <GPIO_u8PinInit+0x160>)
 80007da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	885b      	ldrh	r3, [r3, #2]
 80007e4:	43db      	mvns	r3, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <GPIO_u8PinInit+0x160>)
 80007f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80007f4:	400a      	ands	r2, r1
 80007f6:	60da      	str	r2, [r3, #12]
		}

	}

	//Write on CRL or CRH
	(*configReg) |= ( (PIN) << GET_CRLH_Position(PinConfig->PinNumber)) ;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	461c      	mov	r4, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	885b      	ldrh	r3, [r3, #2]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe84 	bl	8000510 <GET_CRLH_Position>
 8000808:	4603      	mov	r3, r0
 800080a:	fa04 f203 	lsl.w	r2, r4, r3
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	431a      	orrs	r2, r3
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	601a      	str	r2, [r3, #0]

	return LocalErrorStatue ;
 8000818:	7dfb      	ldrb	r3, [r7, #23]

}
 800081a:	4618      	mov	r0, r3
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000

08000828 <GPIO_SetI2CPins>:
 * Return:		Value ErrorState , Type:uint8_t
 *
 *
 ******************************************************/
void GPIO_SetI2CPins(I2C_ID_PERIPHERAL_E I2C_ID )
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]

	//PB6 	->I2C1 SCL
	//PB7	->I2C1 SDA


	switch (I2C_ID)
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <GPIO_SetI2CPins+0x16>
 8000838:	2b01      	cmp	r3, #1
 800083a:	d027      	beq.n	800088c <GPIO_SetI2CPins+0x64>
				.Speed=GPIO_LOWSPEED,

		};
		GPIO_u8PinInit(&I2C2_SCL_PIN);
		break;
	default: break;
 800083c:	e04d      	b.n	80008da <GPIO_SetI2CPins+0xb2>
		GPIO_PinConfig_S I2C1_SDA_PIN=
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	2301      	movs	r3, #1
 800084a:	843b      	strh	r3, [r7, #32]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000850:	2307      	movs	r3, #7
 8000852:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000856:	2302      	movs	r3, #2
 8000858:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		GPIO_u8PinInit(&I2C1_SDA_PIN);
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff2f 	bl	80006c4 <GPIO_u8PinInit>
		GPIO_PinConfig_S I2C1_SCL_PIN=
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	2301      	movs	r3, #1
 8000872:	833b      	strh	r3, [r7, #24]
 8000874:	2340      	movs	r3, #64	; 0x40
 8000876:	837b      	strh	r3, [r7, #26]
 8000878:	2307      	movs	r3, #7
 800087a:	773b      	strb	r3, [r7, #28]
 800087c:	2302      	movs	r3, #2
 800087e:	777b      	strb	r3, [r7, #29]
		GPIO_u8PinInit(&I2C1_SCL_PIN);
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff1d 	bl	80006c4 <GPIO_u8PinInit>
		break;
 800088a:	e026      	b.n	80008da <GPIO_SetI2CPins+0xb2>
		GPIO_PinConfig_S I2C2_SDA_PIN=
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	2301      	movs	r3, #1
 8000898:	823b      	strh	r3, [r7, #16]
 800089a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800089e:	827b      	strh	r3, [r7, #18]
 80008a0:	2307      	movs	r3, #7
 80008a2:	753b      	strb	r3, [r7, #20]
 80008a4:	2302      	movs	r3, #2
 80008a6:	757b      	strb	r3, [r7, #21]
		GPIO_u8PinInit(&I2C2_SDA_PIN);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff09 	bl	80006c4 <GPIO_u8PinInit>
		GPIO_PinConfig_S I2C2_SCL_PIN=
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	2301      	movs	r3, #1
 80008be:	813b      	strh	r3, [r7, #8]
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	817b      	strh	r3, [r7, #10]
 80008c6:	2307      	movs	r3, #7
 80008c8:	733b      	strb	r3, [r7, #12]
 80008ca:	2302      	movs	r3, #2
 80008cc:	737b      	strb	r3, [r7, #13]
		GPIO_u8PinInit(&I2C2_SCL_PIN);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fef6 	bl	80006c4 <GPIO_u8PinInit>
		break;
 80008d8:	bf00      	nop
	}


}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	; 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <I2C_Init>:



/***************************************APIS**************************************/
uint8_t I2C_Init(I2C_Config_S* HI2C)
{
 80008e4:	b4b0      	push	{r4, r5, r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
		Thigh = CCR * TPCLK1
		Tlow  = CCR * TPCLK1
		3-Configure the rise time register
		4-Program the I2C_CR1 register to enable the peripheral
	 **/
	uint8_t 	LocalErrorStatue = OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

	uint16_t	TempReg1 =0 , Freqrange =0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	81bb      	strh	r3, [r7, #12]
 80008f4:	2300      	movs	r3, #0
 80008f6:	817b      	strh	r3, [r7, #10]

	uint16_t 	result   =0;	/*CCR Result*/
 80008f8:	2300      	movs	r3, #0
 80008fa:	813b      	strh	r3, [r7, #8]

	if(HI2C != NULL)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f000 8155 	beq.w	8000bae <I2C_Init+0x2ca>
	{
		/*Enable RCC FOR Test& Reset Value Of Registers*/
		switch(HI2C->I2C_DEFINETION)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <I2C_Init+0x2e>
 800090c:	2b01      	cmp	r3, #1
 800090e:	d007      	beq.n	8000920 <I2C_Init+0x3c>
			break;
		case I2C_TWO:
			/*Reset Registers Value*/
			I2C1_CLCK_EN();
			break;
		default :	break;
 8000910:	e00d      	b.n	800092e <I2C_Init+0x4a>
			I2C1_CLCK_EN();
 8000912:	4b6e      	ldr	r3, [pc, #440]	; (8000acc <I2C_Init+0x1e8>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a6d      	ldr	r2, [pc, #436]	; (8000acc <I2C_Init+0x1e8>)
 8000918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091c:	61d3      	str	r3, [r2, #28]
			break;
 800091e:	e006      	b.n	800092e <I2C_Init+0x4a>
			I2C1_CLCK_EN();
 8000920:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <I2C_Init+0x1e8>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a69      	ldr	r2, [pc, #420]	; (8000acc <I2C_Init+0x1e8>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092a:	61d3      	str	r3, [r2, #28]
			break;
 800092c:	bf00      	nop
		}

		Global_I2C_CONFIG_Def[HI2C->I2C_DEFINETION]=*(HI2C);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4a67      	ldr	r2, [pc, #412]	; (8000ad0 <I2C_Init+0x1ec>)
 8000934:	015b      	lsls	r3, r3, #5
 8000936:	441a      	add	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4614      	mov	r4, r2
 800093c:	461d      	mov	r5, r3
 800093e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000942:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/*Switch mode*/
		if(HI2C->SMBus_MODE ==I2C_MODE )
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7adb      	ldrb	r3, [r3, #11]
 800094e:	2b00      	cmp	r3, #0
 8000950:	f040 80c6 	bne.w	8000ae0 <I2C_Init+0x1fc>
			/**<I2C Supported In Soc>**/

			/**1- Init time | Peripheral clock frequency **/

			/*CLEAR FREQ BITS*/
			Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR2 &=~(I2C_CR2_FREQ_Msk);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b5e      	ldr	r3, [pc, #376]	; (8000ad4 <I2C_Init+0x1f0>)
 800095c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <I2C_Init+0x1f0>)
 800096a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800096e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000972:	605a      	str	r2, [r3, #4]

			Freqrange=(uint16_t)((PCLCK1_FREQ) / (MHZ) );
 8000974:	2308      	movs	r3, #8
 8000976:	817b      	strh	r3, [r7, #10]

			Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR2 |=Freqrange ;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b55      	ldr	r3, [pc, #340]	; (8000ad4 <I2C_Init+0x1f0>)
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	6859      	ldr	r1, [r3, #4]
 8000986:	897a      	ldrh	r2, [r7, #10]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	4b51      	ldr	r3, [pc, #324]	; (8000ad4 <I2C_Init+0x1f0>)
 8000990:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000994:	430a      	orrs	r2, r1
 8000996:	605a      	str	r2, [r3, #4]


			//2-Configure the clock control registers while peripheral is disabled

			if( (HI2C->I2C_ClockSpeed ==I2C_SCLCK_SM_50K) || (HI2C->I2C_ClockSpeed ==I2C_SCLCK_SM_100K) )
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d004      	beq.n	80009ae <I2C_Init+0xca>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	4a4b      	ldr	r2, [pc, #300]	; (8000ad8 <I2C_Init+0x1f4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d128      	bne.n	8000a00 <I2C_Init+0x11c>
			{
				/*in Standard Mode SM*/

				/**					CCR = FPCLCK1 / (FI2C_CLCK*2)			**/

				result = (uint16_t)((PCLCK1_FREQ)/((HI2C->I2C_ClockSpeed)<<1));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4a49      	ldr	r2, [pc, #292]	; (8000adc <I2C_Init+0x1f8>)
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	813b      	strh	r3, [r7, #8]

				/*put result in CCR  Reg */
				Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CCR |=result ;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <I2C_Init+0x1f0>)
 80009c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c8:	69d9      	ldr	r1, [r3, #28]
 80009ca:	893a      	ldrh	r2, [r7, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <I2C_Init+0x1f0>)
 80009d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009d8:	430a      	orrs	r2, r1
 80009da:	61da      	str	r2, [r3, #28]
				to respect the tHIGH parameter.
				Note: TRISE[5:0] must be configured only when the I2C is disabled (PE = 0)
				 *
				 */

				Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->TRISE |=Freqrange + 1;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <I2C_Init+0x1f0>)
 80009e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e8:	6a1a      	ldr	r2, [r3, #32]
 80009ea:	897b      	ldrh	r3, [r7, #10]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4619      	mov	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <I2C_Init+0x1f0>)
 80009f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	621a      	str	r2, [r3, #32]
			}


			/****************************DMA Enable**********************************/

			Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR2 |= HI2C->I2C_DMA_EN ;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <I2C_Init+0x1f0>)
 8000a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	891b      	ldrh	r3, [r3, #8]
 8000a12:	4619      	mov	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <I2C_Init+0x1f0>)
 8000a1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	605a      	str	r2, [r3, #4]


			/*  I2C CR1 Configuration */

			TempReg1 = Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR1 ;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <I2C_Init+0x1f0>)
 8000a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	81bb      	strh	r3, [r7, #12]

			TempReg1 |= (uint16_t)((HI2C->I2C_ACK_Control )|(HI2C->I2C_General_Call) | (HI2C->I2C_CLCK_Stretching));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	8a9a      	ldrh	r2, [r3, #20]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7d9b      	ldrb	r3, [r3, #22]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7a9b      	ldrb	r3, [r3, #10]
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	89bb      	ldrh	r3, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	81bb      	strh	r3, [r7, #12]

			Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR1 =TempReg1 ;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <I2C_Init+0x1f0>)
 8000a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a62:	89ba      	ldrh	r2, [r7, #12]
 8000a64:	601a      	str	r2, [r3, #0]


			/*OAR1 & OAR2 Reg */

			TempReg1 = 0 ;
 8000a66:	2300      	movs	r3, #0
 8000a68:	81bb      	strh	r3, [r7, #12]

			if(HI2C->I2C_ADDRESS_MODE.DUAL_ADDRESS_Enable == 1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d112      	bne.n	8000a98 <I2C_Init+0x1b4>
			{
				/*DUAL ADDRESS MODE & Put I2C_OAR2_ENDUAL bit = 1 in TempReg1 */
				TempReg1 =  I2C_OAR2_ENDUAL ;
 8000a72:	2301      	movs	r3, #1
 8000a74:	81bb      	strh	r3, [r7, #12]

				TempReg1 |= HI2C->I2C_ADDRESS_MODE.Secondery_Address << I2C_OAR2_ADD2_Pos  ;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	8a1b      	ldrh	r3, [r3, #16]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	81bb      	strh	r3, [r7, #12]

				Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->OAR2 = TempReg1 ;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <I2C_Init+0x1f0>)
 8000a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a94:	89ba      	ldrh	r2, [r7, #12]
 8000a96:	60da      	str	r2, [r3, #12]

			}

			/*SINGLE ADDRESS MODE & 7 bit mode */
			/* 10 bit mode not supported  */
			TempReg1 =0 ;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	81bb      	strh	r3, [r7, #12]

			TempReg1 |= HI2C->I2C_ADDRESS_MODE.Primary_ADDRESS << I2C_OAR1_ADD0_Pos ;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	89db      	ldrh	r3, [r3, #14]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	81bb      	strh	r3, [r7, #12]

			TempReg1 |=  HI2C->I2C_ADDRESS_MODE.I2C_Address_Slave_Mode ;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	8a5a      	ldrh	r2, [r3, #18]
 8000ab2:	89bb      	ldrh	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	81bb      	strh	r3, [r7, #12]

			Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->OAR1 = TempReg1 ;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <I2C_Init+0x1f0>)
 8000ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac4:	89ba      	ldrh	r2, [r7, #12]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	e00c      	b.n	8000ae4 <I2C_Init+0x200>
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	20000080 	.word	0x20000080
 8000ad4:	2000001c 	.word	0x2000001c
 8000ad8:	000186a0 	.word	0x000186a0
 8000adc:	007a1200 	.word	0x007a1200
		}
		else
		{

			/*Soc Not Support SMBUS*/
			LocalErrorStatue=NOK;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]

		}

		if(HI2C->I2C_Interrupt_State == I2C_Interrupt)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7e5b      	ldrb	r3, [r3, #25]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d12f      	bne.n	8000b4c <I2C_Init+0x268>
		{
			/*Work With Interrupt  Enable Slave Interrupt IRQ*/

			Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR2 |= I2C_CR2_ITERREN	;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <I2C_Init+0x2dc>)
 8000af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b0a:	605a      	str	r2, [r3, #4]
			Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR2 |= I2C_CR2_ITEVTEN	;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b2a:	605a      	str	r2, [r3, #4]
			Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR2 |= I2C_CR2_ITBUFEN	;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b4a:	605a      	str	r2, [r3, #4]


		}

		Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->CR1 |= HI2C->I2C_EN_STATUS ;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7ddb      	ldrb	r3, [r3, #23]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]

		Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->SR1 &=~(REG_MASH);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]

		Global_I2C_PERIPHERAL_Def[HI2C->I2C_DEFINETION]->SR2 &=~(REG_MASH);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <I2C_Init+0x2dc>)
 8000b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <I2C_Init+0x2dc>)
 8000ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
 8000bac:	e001      	b.n	8000bb2 <I2C_Init+0x2ce>

	}
	else
	{

		LocalErrorStatue = NULL_POINTER;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	73fb      	strb	r3, [r7, #15]
	}


	return LocalErrorStatue ;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bcb0      	pop	{r4, r5, r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000001c 	.word	0x2000001c

08000bc4 <I2C_GenerateStartBit>:
 * @param DeviceAddress
 * @param NewStartStatue : Start Enable | Start Disable
 * @param Start			 : Start | Repeat Start
 */
void I2C_GenerateStartBit(I2C_TypeDef_S* I2Cx  , Start_Condition_E NewStartStatue , RepetedStart_E Start)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	807b      	strh	r3, [r7, #2]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	707b      	strb	r3, [r7, #1]
	if(Start != REPEAT_START)
 8000bd4:	787b      	ldrb	r3, [r7, #1]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d007      	beq.n	8000bea <I2C_GenerateStartBit+0x26>
	{
		/*Check Bus ideal*/
		/*Polling Until bus flag return ideal*/
		while(I2C_GetFlagStatue(I2Cx,I2C_BUSY_FLAG));
 8000bda:	bf00      	nop
 8000bdc:	2100      	movs	r1, #0
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f89e 	bl	8000d20 <I2C_GetFlagStatue>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f8      	bne.n	8000bdc <I2C_GenerateStartBit+0x18>
		1: Repeated start generation
		In Slave mode:
		0: No Start generation
		1: Start generation when the bus is free
	 */
	switch(NewStartStatue)
 8000bea:	887b      	ldrh	r3, [r7, #2]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <I2C_GenerateStartBit+0x34>
 8000bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf4:	d007      	beq.n	8000c06 <I2C_GenerateStartBit+0x42>

	}



}
 8000bf6:	e00d      	b.n	8000c14 <I2C_GenerateStartBit+0x50>
		I2Cx->CR1 &=~(I2C_CR1_START);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	601a      	str	r2, [r3, #0]
		break;
 8000c04:	e006      	b.n	8000c14 <I2C_GenerateStartBit+0x50>
		I2Cx->CR1 |= I2C_CR1_START ;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
		break;
 8000c12:	bf00      	nop
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <I2C_GenerateStopBit>:
 *
 * @param I2Cx
 * @param Stop
 */
void I2C_GenerateStopBit(I2C_TypeDef_S* I2Cx ,Stop_Condition_E Stop)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
		1: Stop generation after the current byte transfer or after the current Start condition is sent.
		In Slave mode:
		0: No Stop generation.
		1: Release the SCL and SDA lines after the current byte transfer.
	 */
	switch (Stop)
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <I2C_GenerateStopBit+0x18>
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d007      	beq.n	8000c42 <I2C_GenerateStopBit+0x26>
	case I2C_STOP_CONDITION_ENABLE :
		I2Cx->CR1 |=I2C_CR1_STOP ;
		break;
	}

}
 8000c32:	e00d      	b.n	8000c50 <I2C_GenerateStopBit+0x34>
		I2Cx->CR1 &=(~I2C_CR1_STOP)  ;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	601a      	str	r2, [r3, #0]
		break;
 8000c40:	e006      	b.n	8000c50 <I2C_GenerateStopBit+0x34>
		I2Cx->CR1 |=I2C_CR1_STOP ;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]
		break;
 8000c4e:	bf00      	nop
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
	...

08000c5c <I2C_Master_Tx>:
 * @param BufferDataOutput
 * @param DataLenght
 * @param Stop
 */
void I2C_Master_Tx(I2C_TypeDef_S* I2Cx , uint16_t DeviceAddress , uint16_t* BufferDataOutput , uint16_t DataLenght , Stop_Condition_E Stop , RepetedStart_E Start)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	461a      	mov	r2, r3
 8000c68:	460b      	mov	r3, r1
 8000c6a:	817b      	strh	r3, [r7, #10]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	813b      	strh	r3, [r7, #8]
	uint8_t counter ;

	/*Send Start Bit & configure timeout by timer */

	I2C_GenerateStartBit(I2Cx ,I2C_START_ENABLE ,Start);
 8000c70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c74:	461a      	mov	r2, r3
 8000c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff ffa2 	bl	8000bc4 <I2C_GenerateStartBit>

	/*Wait For EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.*/

	while(!I2C_GetFlagStatue(I2Cx,EV5));
 8000c80:	bf00      	nop
 8000c82:	2101      	movs	r1, #1
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f000 f84b 	bl	8000d20 <I2C_GetFlagStatue>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f8      	beq.n	8000c82 <I2C_Master_Tx+0x26>

	/*writing DR register with Address*/

	I2C_SendAddress(I2Cx , DeviceAddress , I2C_Direction_Transmitter); //TX
 8000c90:	897b      	ldrh	r3, [r7, #10]
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f000 f8e4 	bl	8000e64 <I2C_SendAddress>

	/*Wait For  EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2*/

	while(!I2C_GetFlagStatue(I2Cx,EV6));
 8000c9c:	bf00      	nop
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 f83d 	bl	8000d20 <I2C_GetFlagStatue>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0f8      	beq.n	8000c9e <I2C_Master_Tx+0x42>

	/*check flags TRA(Tx|Rx) ,BUSY , MSL (M|S) , TXE */

	while(!I2C_GetFlagStatue(I2Cx,I2C_MASTER_BYTE_TRANSMITING));
 8000cac:	bf00      	nop
 8000cae:	491b      	ldr	r1, [pc, #108]	; (8000d1c <I2C_Master_Tx+0xc0>)
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f000 f835 	bl	8000d20 <I2C_GetFlagStatue>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f8      	beq.n	8000cae <I2C_Master_Tx+0x52>


	for(counter = 0 ; counter < DataLenght ; counter++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	75fb      	strb	r3, [r7, #23]
 8000cc0:	e012      	b.n	8000ce8 <I2C_Master_Tx+0x8c>
	{
		/*write on DR */
		I2Cx->DR = BufferDataOutput[counter];
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

		/*Wait EV8(ACK) : TxE=1, shift register not empty, data register empty, cleared by writing DR register*/
		while(!I2C_GetFlagStatue(I2Cx,EV8));
 8000cd2:	bf00      	nop
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f000 f822 	bl	8000d20 <I2C_GetFlagStatue>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f8      	beq.n	8000cd4 <I2C_Master_Tx+0x78>
	for(counter = 0 ; counter < DataLenght ; counter++)
 8000ce2:	7dfb      	ldrb	r3, [r7, #23]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	75fb      	strb	r3, [r7, #23]
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	893a      	ldrh	r2, [r7, #8]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d8e7      	bhi.n	8000cc2 <I2C_Master_Tx+0x66>

	}

	/*EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition*/

	while(!I2C_GetFlagStatue(I2Cx,EV8_2));
 8000cf2:	bf00      	nop
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 f812 	bl	8000d20 <I2C_GetFlagStatue>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f8      	beq.n	8000cf4 <I2C_Master_Tx+0x98>

	/*Send Stop Condition*/

	if(Stop ==I2C_STOP_CONDITION_ENABLE)
 8000d02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d103      	bne.n	8000d12 <I2C_Master_Tx+0xb6>
	{
		I2C_GenerateStopBit(I2Cx,I2C_STOP_CONDITION_ENABLE);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f7ff ff85 	bl	8000c1c <I2C_GenerateStopBit>
	}




}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	00070080 	.word	0x00070080

08000d20 <I2C_GetFlagStatue>:
 * @param I2Cx
 * @param flag : which Flag Want Check
 * @return
 */
FlagState_E I2C_GetFlagStatue (I2C_TypeDef_S* I2Cx  , I2C_Flags_E flag )
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]

	FlagState_E BitStatus = Reset ;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	77fb      	strb	r3, [r7, #31]

	volatile uint32_t DummyRead ;

	uint32_t flag1=0 , flag2=0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]

	uint32_t LastValue= 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]

	switch (flag)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d815      	bhi.n	8000d6c <I2C_GetFlagStatue+0x4c>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	f200 8086 	bhi.w	8000e54 <I2C_GetFlagStatue+0x134>
 8000d48:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <I2C_GetFlagStatue+0x30>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000d77 	.word	0x08000d77
 8000d54:	08000d8f 	.word	0x08000d8f
 8000d58:	08000da7 	.word	0x08000da7
 8000d5c:	08000e01 	.word	0x08000e01
 8000d60:	08000e01 	.word	0x08000e01
 8000d64:	08000e19 	.word	0x08000e19
 8000d68:	08000e3d 	.word	0x08000e3d
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4a3c      	ldr	r2, [pc, #240]	; (8000e60 <I2C_GetFlagStatue+0x140>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d02a      	beq.n	8000dca <I2C_GetFlagStatue+0xaa>
 8000d74:	e06e      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
	– Set by hardware on detection of SDA or SCL low
	– cleared by hardware on detection of a Stop condition.
	It indicates a communication in progress on the bus. This information is still updated when
	the interface is disabled (PE=0)*/

		if((I2Cx->SR2) & I2C_SR2_BUSY)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <I2C_GetFlagStatue+0x68>
		{
			BitStatus=Set;	/*Bus Not Ideal*/
 8000d82:	2301      	movs	r3, #1
 8000d84:	77fb      	strb	r3, [r7, #31]
		}
		else{
			BitStatus=Reset;
		}
		break;
 8000d86:	e065      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
			BitStatus=Reset;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	77fb      	strb	r3, [r7, #31]
		break;
 8000d8c:	e062      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
			1: Start condition generated.
			– Set when a Start condition generated.
			– Cleared by software by reading the SR1 register followed by writing the DR register, or by
			hardware when PE=0*/

		if((I2Cx->SR1) & I2C_SR1_SB)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <I2C_GetFlagStatue+0x80>
		{
			BitStatus=Set;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	77fb      	strb	r3, [r7, #31]
		}
		else{
			BitStatus=Reset;
		}
		break;
 8000d9e:	e059      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
			BitStatus=Reset;
 8000da0:	2300      	movs	r3, #0
 8000da2:	77fb      	strb	r3, [r7, #31]
		break;
 8000da4:	e056      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
		0: No end of address transmission
		1: End of address transmission
		– For 10-bit addressing, the bit is set after the ACK of the 2nd byte.
		– For 7-bit addressing, the bit is set after the ACK of the byte.
		Note: ADDR is not set after a NACK reception*/
		if((I2Cx->SR1) & I2C_SR1_ADDR)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <I2C_GetFlagStatue+0x98>
		{
			BitStatus=Set;
 8000db2:	2301      	movs	r3, #1
 8000db4:	77fb      	strb	r3, [r7, #31]
 8000db6:	e001      	b.n	8000dbc <I2C_GetFlagStatue+0x9c>
		}
		else{
			BitStatus=Reset;
 8000db8:	2300      	movs	r3, #0
 8000dba:	77fb      	strb	r3, [r7, #31]
		}
		DummyRead =I2Cx->SR1 ;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	60fb      	str	r3, [r7, #12]
		DummyRead =I2Cx->SR2 ;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	60fb      	str	r3, [r7, #12]
		//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag, even if the ADDR flag was set after reading I2C_SR1. Consequently,
		//I2C_SR2 must be read only when ADDR is found set in I2C_SR1 or when the STOPF bit is cleared.

		break;
 8000dc8:	e044      	b.n	8000e54 <I2C_GetFlagStatue+0x134>

	case I2C_MASTER_BYTE_TRANSMITING :

		flag1 = I2Cx->SR1 ;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2 ;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	617b      	str	r3, [r7, #20]
		flag2 =flag2<<16;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	617b      	str	r3, [r7, #20]

		LastValue = ((uint32_t)(flag1 | flag2)) &(uint32_t)(0x00ffffff);
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000de6:	613b      	str	r3, [r7, #16]

		if((LastValue & flag)==flag)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	4013      	ands	r3, r2
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d102      	bne.n	8000dfa <I2C_GetFlagStatue+0xda>
		{
			BitStatus=Set;
 8000df4:	2301      	movs	r3, #1
 8000df6:	77fb      	strb	r3, [r7, #31]
		}
		else{
			BitStatus=Reset;
		}
		break;
 8000df8:	e02c      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
			BitStatus=Reset;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	77fb      	strb	r3, [r7, #31]
		break;
 8000dfe:	e029      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
				– Cleared by software writing to the DR register or by hardware after a start or a stop condition
				or when PE=0.
				TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
				Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
				BTF is set, as in both cases the data register is still empty.*/
		if((I2Cx->SR1) &(I2C_SR1_TXE) )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <I2C_GetFlagStatue+0xf2>
		{
			BitStatus=Set;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	77fb      	strb	r3, [r7, #31]
		}
		else{
			BitStatus=Reset;
		}
		break;
 8000e10:	e020      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
			BitStatus=Reset;
 8000e12:	2300      	movs	r3, #0
 8000e14:	77fb      	strb	r3, [r7, #31]
		break;
 8000e16:	e01d      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
or when PE=0.
TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
BTF is set, as in both cases the data register is still empty
		 */
		if((I2Cx->SR1)&(I2C_SR1_TXE) &&  (I2Cx->SR1)&(I2C_SR1_BTF))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d008      	beq.n	8000e36 <I2C_GetFlagStatue+0x116>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <I2C_GetFlagStatue+0x116>
		{
			BitStatus=Set;
 8000e30:	2301      	movs	r3, #1
 8000e32:	77fb      	strb	r3, [r7, #31]
		}
		else{
			BitStatus=Reset;
		}
		break;
 8000e34:	e00e      	b.n	8000e54 <I2C_GetFlagStatue+0x134>
			BitStatus=Reset;
 8000e36:	2300      	movs	r3, #0
 8000e38:	77fb      	strb	r3, [r7, #31]
		break;
 8000e3a:	e00b      	b.n	8000e54 <I2C_GetFlagStatue+0x134>

	case EV7:

		if((I2Cx->SR1) &(I2C_SR1_RXNE) )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <I2C_GetFlagStatue+0x12e>
		{
			BitStatus=Set;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	77fb      	strb	r3, [r7, #31]
		}
		else{
			BitStatus=Reset;
		}
		break;
 8000e4c:	e001      	b.n	8000e52 <I2C_GetFlagStatue+0x132>
			BitStatus=Reset;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	77fb      	strb	r3, [r7, #31]
		break;
 8000e52:	bf00      	nop


	}


	return BitStatus ;
 8000e54:	7ffb      	ldrb	r3, [r7, #31]


}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	00070080 	.word	0x00070080

08000e64 <I2C_SendAddress>:
 * @param I2Cx
 * @param address
 * @param I2C_Direction : Read Or Write
 */
void I2C_SendAddress(I2C_TypeDef_S* I2Cx ,uint16_t address , I2C_Direction_E I2C_Direction)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
 8000e70:	4613      	mov	r3, r2
 8000e72:	707b      	strb	r3, [r7, #1]
	/*7 bit address & last bit R/W*/
	address = address<<1 ;
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	807b      	strh	r3, [r7, #2]

	if(I2C_Direction != I2C_Direction_Transmitter)
 8000e7a:	787b      	ldrb	r3, [r7, #1]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <I2C_SendAddress+0x26>
	{
		/*Set Last bit address bit0 for read*/
		address |=1<<0 ;
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	e003      	b.n	8000e92 <I2C_SendAddress+0x2e>

	}
	else
	{
		/*tog Last bit address bit0 for write*/
		address &=~(1<<0);
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	807b      	strh	r3, [r7, #2]
	}
	I2Cx->DR = address ;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	611a      	str	r2, [r3, #16]

}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <I2C1_EV_IRQHandler>:
/************************************************Interrupt Handler ***************************************/



void I2C1_EV_IRQHandler()  					/* I2C1 event interrupt                             */
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0



}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler()        			/* I2C1 error interrupt                             */
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0



}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler()        			/* I2C2 event interrupt                             */
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0



}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler()
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0


}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <RCC_EnableAPB2CLCK>:
	return (RCC_GetHCLCK() >> APBPrescTable[((RCC-> CFGR.Reg )>> PCLCK2_BIT )&PCLCK_MASK] );


}
void RCC_EnableAPB2CLCK(uint8_t APB2_Peripheral_ID )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]

	RCC->APB2ENR |=1<<APB2_Peripheral_ID ;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <RCC_EnableAPB2CLCK+0x28>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	79fa      	ldrb	r2, [r7, #7]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	4611      	mov	r1, r2
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <RCC_EnableAPB2CLCK+0x28>)
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	6193      	str	r3, [r2, #24]


}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000

08000f00 <SPI1_IRQHandler>:

	return LocalErrorStatue ;
}

void SPI1_IRQHandler()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
	struct IRQ_SRC_S IRQ_SRC;

	IRQ_SRC.TXE= ((SPI1->SR & (1<<1) )>>1);
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <SPI1_IRQHandler+0x54>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	085b      	lsrs	r3, r3, #1
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	793b      	ldrb	r3, [r7, #4]
 8000f14:	f362 0300 	bfi	r3, r2, #0, #1
 8000f18:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE= ((SPI1->SR & (1<<0) )>>0);
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <SPI1_IRQHandler+0x54>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	793b      	ldrb	r3, [r7, #4]
 8000f26:	f362 0341 	bfi	r3, r2, #1, #1
 8000f2a:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERRI= ((SPI1->SR & (1<<4) )>>4);
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <SPI1_IRQHandler+0x54>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	793b      	ldrb	r3, [r7, #4]
 8000f3a:	f362 0382 	bfi	r3, r2, #2, #1
 8000f3e:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[0]->SPI_PtrCallBack(IRQ_SRC);
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SPI1_IRQHandler+0x58>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	7938      	ldrb	r0, [r7, #4]
 8000f48:	4798      	blx	r3

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40013000 	.word	0x40013000
 8000f58:	200000c0 	.word	0x200000c0

08000f5c <SPI2_IRQHandler>:
void SPI2_IRQHandler()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	struct IRQ_SRC_S IRQ_SRC;

	IRQ_SRC.TXE= ((SPI2->SR & (1<<1) )>>1);
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <SPI2_IRQHandler+0x54>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	085b      	lsrs	r3, r3, #1
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	793b      	ldrb	r3, [r7, #4]
 8000f70:	f362 0300 	bfi	r3, r2, #0, #1
 8000f74:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE= ((SPI2->SR & (1<<0) )>>0);
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <SPI2_IRQHandler+0x54>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	793b      	ldrb	r3, [r7, #4]
 8000f82:	f362 0341 	bfi	r3, r2, #1, #1
 8000f86:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERRI= ((SPI2->SR & (1<<4) )>>4);
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <SPI2_IRQHandler+0x54>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	793b      	ldrb	r3, [r7, #4]
 8000f96:	f362 0382 	bfi	r3, r2, #2, #1
 8000f9a:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[1]->SPI_PtrCallBack(IRQ_SRC);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SPI2_IRQHandler+0x58>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	7938      	ldrb	r0, [r7, #4]
 8000fa4:	4798      	blx	r3

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40003800 	.word	0x40003800
 8000fb4:	200000c0 	.word	0x200000c0

08000fb8 <main>:
//const uint8_t MAX7221_DdecoderArray[8]={MAX7221_D0,MAX7221_D1,MAX7221_D2,MAX7221_D3,MAX7221_D4,MAX7221_D5,MAX7221_D6,MAX7221_D7};
//
//

int main(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0

	CLCK_Init();
 8000fbe:	f000 f835 	bl	800102c <CLCK_Init>



	/**************************** I2C  Lab **********************************************/

	uint16_t  CH1[]={0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <main+0x6c>)
 8000fc4:	f107 0410 	add.w	r4, r7, #16
 8000fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fca:	c407      	stmia	r4!, {r0, r1, r2}
 8000fcc:	8023      	strh	r3, [r4, #0]
	uint16_t  CH2[7]={0x25,0x26,0x27,0x30,0x50,0x60,0x70};
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <main+0x70>)
 8000fd0:	463c      	mov	r4, r7
 8000fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd4:	c407      	stmia	r4!, {r0, r1, r2}
 8000fd6:	8023      	strh	r3, [r4, #0]

	EEPROM_voidInit();
 8000fd8:	f7ff f8ca 	bl	8000170 <EEPROM_voidInit>
	EEPROM_Write_Byte(0xAF, CH1, 7);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	20af      	movs	r0, #175	; 0xaf
 8000fe6:	f7ff f8e9 	bl	80001bc <EEPROM_Write_Byte>

	EEPROM_Read_Byte(0xAF, CH2, 7);
 8000fea:	463b      	mov	r3, r7
 8000fec:	2207      	movs	r2, #7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	20af      	movs	r0, #175	; 0xaf
 8000ff2:	f7ff f955 	bl	80002a0 <EEPROM_Read_Byte>

	CH1[0]=0x0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	823b      	strh	r3, [r7, #16]
	CH1[1]=0x1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	827b      	strh	r3, [r7, #18]
	CH1[2]=0x2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	82bb      	strh	r3, [r7, #20]
	CH1[3]=0x3;
 8001002:	2303      	movs	r3, #3
 8001004:	82fb      	strh	r3, [r7, #22]

	EEPROM_Write_Byte(0xAF, CH1,4);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	2204      	movs	r2, #4
 800100c:	4619      	mov	r1, r3
 800100e:	20af      	movs	r0, #175	; 0xaf
 8001010:	f7ff f8d4 	bl	80001bc <EEPROM_Write_Byte>

	EEPROM_Read_Byte(0xAF, CH2,4);
 8001014:	463b      	mov	r3, r7
 8001016:	2204      	movs	r2, #4
 8001018:	4619      	mov	r1, r3
 800101a:	20af      	movs	r0, #175	; 0xaf
 800101c:	f7ff f940 	bl	80002a0 <EEPROM_Read_Byte>




	/* Loop forever */
	for(;;);
 8001020:	e7fe      	b.n	8001020 <main+0x68>
 8001022:	bf00      	nop
 8001024:	08001130 	.word	0x08001130
 8001028:	08001140 	.word	0x08001140

0800102c <CLCK_Init>:

}

void CLCK_Init()
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLCK_EN();
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <CLCK_Init+0x30>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a09      	ldr	r2, [pc, #36]	; (800105c <CLCK_Init+0x30>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLCK_EN();
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <CLCK_Init+0x30>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <CLCK_Init+0x30>)
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	6193      	str	r3, [r2, #24]

	AFIO_GPIOA_CLCK_EN();
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <CLCK_Init+0x30>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a03      	ldr	r2, [pc, #12]	; (800105c <CLCK_Init+0x30>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6193      	str	r3, [r2, #24]

	//SPI1_CLCK_EN();



}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000

08001060 <USART1_IRQHandler>:


void USART1_IRQHandler()
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(PORTA, PIN4, GPIO_PINLOW);
	SPI_U16TXRX(SPI1, &CH, Polling_Enable);
	GPIO_u8SetPinValue(PORTA, PIN4, GPIO_PINHIGH);

#endif
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001070:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800109a:	f000 f819 	bl	80010d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109e:	f7ff ff8b 	bl	8000fb8 <main>

080010a2 <LoopForever>:

LoopForever:
  b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010b0:	08001158 	.word	0x08001158
  ldr r2, =_sbss
 80010b4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010b8:	200000c8 	.word	0x200000c8

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>

080010be <memset>:
 80010be:	4603      	mov	r3, r0
 80010c0:	4402      	add	r2, r0
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d100      	bne.n	80010c8 <memset+0xa>
 80010c6:	4770      	bx	lr
 80010c8:	f803 1b01 	strb.w	r1, [r3], #1
 80010cc:	e7f9      	b.n	80010c2 <memset+0x4>
	...

080010d0 <__libc_init_array>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	2600      	movs	r6, #0
 80010d4:	4d0c      	ldr	r5, [pc, #48]	; (8001108 <__libc_init_array+0x38>)
 80010d6:	4c0d      	ldr	r4, [pc, #52]	; (800110c <__libc_init_array+0x3c>)
 80010d8:	1b64      	subs	r4, r4, r5
 80010da:	10a4      	asrs	r4, r4, #2
 80010dc:	42a6      	cmp	r6, r4
 80010de:	d109      	bne.n	80010f4 <__libc_init_array+0x24>
 80010e0:	f000 f81a 	bl	8001118 <_init>
 80010e4:	2600      	movs	r6, #0
 80010e6:	4d0a      	ldr	r5, [pc, #40]	; (8001110 <__libc_init_array+0x40>)
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <__libc_init_array+0x44>)
 80010ea:	1b64      	subs	r4, r4, r5
 80010ec:	10a4      	asrs	r4, r4, #2
 80010ee:	42a6      	cmp	r6, r4
 80010f0:	d105      	bne.n	80010fe <__libc_init_array+0x2e>
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
 80010f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80010f8:	4798      	blx	r3
 80010fa:	3601      	adds	r6, #1
 80010fc:	e7ee      	b.n	80010dc <__libc_init_array+0xc>
 80010fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001102:	4798      	blx	r3
 8001104:	3601      	adds	r6, #1
 8001106:	e7f2      	b.n	80010ee <__libc_init_array+0x1e>
 8001108:	08001150 	.word	0x08001150
 800110c:	08001150 	.word	0x08001150
 8001110:	08001150 	.word	0x08001150
 8001114:	08001154 	.word	0x08001154

08001118 <_init>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	bf00      	nop
 800111c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111e:	bc08      	pop	{r3}
 8001120:	469e      	mov	lr, r3
 8001122:	4770      	bx	lr

08001124 <_fini>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	bf00      	nop
 8001128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112a:	bc08      	pop	{r3}
 800112c:	469e      	mov	lr, r3
 800112e:	4770      	bx	lr
