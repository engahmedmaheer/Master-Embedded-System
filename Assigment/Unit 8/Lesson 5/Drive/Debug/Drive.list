
Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001310  08001310  00011310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800133c  0800133c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800133c  0800133c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800133c  0800133c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800133c  0800133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001340  08001340  00011340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08001344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000030  08001374  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001374  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003e82  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b53  00000000  00000000  00023f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001044  00000000  00000000  00024a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000270  00000000  00000000  00025ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001f8  00000000  00000000  00025d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000011bd  00000000  00000000  00025f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003916  00000000  00000000  000270dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a10f  00000000  00000000  0002a9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000824  00000000  00000000  00034b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000030 	.word	0x20000030
 800014c:	00000000 	.word	0x00000000
 8000150:	080012f8 	.word	0x080012f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000034 	.word	0x20000034
 800016c:	080012f8 	.word	0x080012f8

08000170 <EXTI0_IRQHandler>:

	return LocalErrorState;
}

void EXTI0_IRQHandler()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000004c 	.word	0x2000004c

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000004c 	.word	0x2000004c

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000004c 	.word	0x2000004c

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	SET_BIT(EXTI->PR,EXTI_IRQ3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	/*CALLING IRQ Handler*/
	EXTI_pvCallBackFunc[EXTI_IRQ3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000004c 	.word	0x2000004c

08000200 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	/*Switch Flag if raised*/
	if(EXTI5_FLAG==Raised)
 8000204:	4b28      	ldr	r3, [pc, #160]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	095b      	lsrs	r3, r3, #5
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	2b01      	cmp	r3, #1
 8000210:	d108      	bne.n	8000224 <EXTI9_5_IRQHandler+0x24>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ5);
 8000212:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	4a24      	ldr	r2, [pc, #144]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000218:	f043 0320 	orr.w	r3, r3, #32
 800021c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ5]();
 800021e:	4b23      	ldr	r3, [pc, #140]	; (80002ac <EXTI9_5_IRQHandler+0xac>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	4798      	blx	r3
	}
	if(EXTI6_FLAG==Raised)
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000226:	695b      	ldr	r3, [r3, #20]
 8000228:	099b      	lsrs	r3, r3, #6
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	2b01      	cmp	r3, #1
 8000230:	d108      	bne.n	8000244 <EXTI9_5_IRQHandler+0x44>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ6);
 8000232:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800023c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ6]();
 800023e:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <EXTI9_5_IRQHandler+0xac>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	4798      	blx	r3
	}
	if(EXTI7_FLAG==Raised)
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	09db      	lsrs	r3, r3, #7
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	2b01      	cmp	r3, #1
 8000250:	d108      	bne.n	8000264 <EXTI9_5_IRQHandler+0x64>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ7);
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800025c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ7]();
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <EXTI9_5_IRQHandler+0xac>)
 8000260:	69db      	ldr	r3, [r3, #28]
 8000262:	4798      	blx	r3
	}
	if(EXTI8_FLAG==Raised)
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	0a1b      	lsrs	r3, r3, #8
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b01      	cmp	r3, #1
 8000270:	d108      	bne.n	8000284 <EXTI9_5_IRQHandler+0x84>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ8);
 8000272:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800027c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ8]();
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <EXTI9_5_IRQHandler+0xac>)
 8000280:	6a1b      	ldr	r3, [r3, #32]
 8000282:	4798      	blx	r3
	}
	if(EXTI9_FLAG==Raised)
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	0a5b      	lsrs	r3, r3, #9
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	2b01      	cmp	r3, #1
 8000290:	d108      	bne.n	80002a4 <EXTI9_5_IRQHandler+0xa4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ9);
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <EXTI9_5_IRQHandler+0xa8>)
 8000298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800029c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ9]();
 800029e:	4b03      	ldr	r3, [pc, #12]	; (80002ac <EXTI9_5_IRQHandler+0xac>)
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	4798      	blx	r3
	else
	{
		//error
	}

}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40010400 	.word	0x40010400
 80002ac:	2000004c 	.word	0x2000004c

080002b0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	/*Switch Flag if raised*/
	if(EXTI10_FLAG==Raised)
 80002b4:	4b30      	ldr	r3, [pc, #192]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	0a9b      	lsrs	r3, r3, #10
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d108      	bne.n	80002d4 <EXTI15_10_IRQHandler+0x24>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ10);
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a2c      	ldr	r2, [pc, #176]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 80002c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002cc:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/


		EXTI_pvCallBackFunc[EXTI_IRQ10]();
 80002ce:	4b2b      	ldr	r3, [pc, #172]	; (800037c <EXTI15_10_IRQHandler+0xcc>)
 80002d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d2:	4798      	blx	r3
	}
	if(EXTI11_FLAG==Raised)
 80002d4:	4b28      	ldr	r3, [pc, #160]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	0adb      	lsrs	r3, r3, #11
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d108      	bne.n	80002f4 <EXTI15_10_IRQHandler+0x44>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ11);
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a24      	ldr	r2, [pc, #144]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 80002e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002ec:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ11]();
 80002ee:	4b23      	ldr	r3, [pc, #140]	; (800037c <EXTI15_10_IRQHandler+0xcc>)
 80002f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f2:	4798      	blx	r3
	}
	if(EXTI12_FLAG==Raised)
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	0b1b      	lsrs	r3, r3, #12
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d108      	bne.n	8000314 <EXTI15_10_IRQHandler+0x64>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ12);
 8000302:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800030c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ12]();
 800030e:	4b1b      	ldr	r3, [pc, #108]	; (800037c <EXTI15_10_IRQHandler+0xcc>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4798      	blx	r3
	}
	if(EXTI13_FLAG==Raised)
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	0b5b      	lsrs	r3, r3, #13
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	2b01      	cmp	r3, #1
 8000320:	d108      	bne.n	8000334 <EXTI15_10_IRQHandler+0x84>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ13);
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a14      	ldr	r2, [pc, #80]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800032c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ13]();
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <EXTI15_10_IRQHandler+0xcc>)
 8000330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000332:	4798      	blx	r3
	}
	if(EXTI14_FLAG==Raised)
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	0b9b      	lsrs	r3, r3, #14
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <EXTI15_10_IRQHandler+0xa4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ14);
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800034c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ14]();
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <EXTI15_10_IRQHandler+0xcc>)
 8000350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000352:	4798      	blx	r3
	}
	if(EXTI15_FLAG==Raised)
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	0bdb      	lsrs	r3, r3, #15
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	2b01      	cmp	r3, #1
 8000360:	d108      	bne.n	8000374 <EXTI15_10_IRQHandler+0xc4>
	{
		/*Clear pending flag*/
		SET_BIT(EXTI->PR,EXTI_IRQ15);
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a04      	ldr	r2, [pc, #16]	; (8000378 <EXTI15_10_IRQHandler+0xc8>)
 8000368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800036c:	6153      	str	r3, [r2, #20]
		/*CALLING IRQ Handler*/
		EXTI_pvCallBackFunc[EXTI_IRQ15]();
 800036e:	4b03      	ldr	r3, [pc, #12]	; (800037c <EXTI15_10_IRQHandler+0xcc>)
 8000370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000372:	4798      	blx	r3
	}
	else
	{
		//error
	}
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40010400 	.word	0x40010400
 800037c:	2000004c 	.word	0x2000004c

08000380 <GET_CRLH_Position>:
/*For peripheral Only :*/

static GPIO_TypeDef_S* GPIOPORT[GPIO_PERIPHERAL_NUM] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};

static uint8_t GET_CRLH_Position(GPIO_PIN_E PINNUM)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	80fb      	strh	r3, [r7, #6]
	uint8_t Position =0;
 800038a:	2300      	movs	r3, #0
 800038c:	73fb      	strb	r3, [r7, #15]

	switch(PINNUM)
 800038e:	88fb      	ldrh	r3, [r7, #6]
 8000390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000394:	4293      	cmp	r3, r2
 8000396:	f000 80c4 	beq.w	8000522 <GET_CRLH_Position+0x1a2>
 800039a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800039e:	f280 80c2 	bge.w	8000526 <GET_CRLH_Position+0x1a6>
 80003a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a6:	f000 80b9 	beq.w	800051c <GET_CRLH_Position+0x19c>
 80003aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003ae:	f300 80ba 	bgt.w	8000526 <GET_CRLH_Position+0x1a6>
 80003b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b6:	f000 80ae 	beq.w	8000516 <GET_CRLH_Position+0x196>
 80003ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003be:	f300 80b2 	bgt.w	8000526 <GET_CRLH_Position+0x1a6>
 80003c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c6:	f000 80a3 	beq.w	8000510 <GET_CRLH_Position+0x190>
 80003ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ce:	f300 80aa 	bgt.w	8000526 <GET_CRLH_Position+0x1a6>
 80003d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d6:	f000 8098 	beq.w	800050a <GET_CRLH_Position+0x18a>
 80003da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003de:	f300 80a2 	bgt.w	8000526 <GET_CRLH_Position+0x1a6>
 80003e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e6:	f000 808d 	beq.w	8000504 <GET_CRLH_Position+0x184>
 80003ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003ee:	f300 809a 	bgt.w	8000526 <GET_CRLH_Position+0x1a6>
 80003f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f6:	f000 8082 	beq.w	80004fe <GET_CRLH_Position+0x17e>
 80003fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003fe:	f300 8092 	bgt.w	8000526 <GET_CRLH_Position+0x1a6>
 8000402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000406:	d077      	beq.n	80004f8 <GET_CRLH_Position+0x178>
 8000408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800040c:	f300 808b 	bgt.w	8000526 <GET_CRLH_Position+0x1a6>
 8000410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000414:	d06d      	beq.n	80004f2 <GET_CRLH_Position+0x172>
 8000416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800041a:	f300 8084 	bgt.w	8000526 <GET_CRLH_Position+0x1a6>
 800041e:	2b80      	cmp	r3, #128	; 0x80
 8000420:	d064      	beq.n	80004ec <GET_CRLH_Position+0x16c>
 8000422:	2b80      	cmp	r3, #128	; 0x80
 8000424:	dc7f      	bgt.n	8000526 <GET_CRLH_Position+0x1a6>
 8000426:	2b20      	cmp	r3, #32
 8000428:	dc48      	bgt.n	80004bc <GET_CRLH_Position+0x13c>
 800042a:	2b00      	cmp	r3, #0
 800042c:	dd7b      	ble.n	8000526 <GET_CRLH_Position+0x1a6>
 800042e:	3b01      	subs	r3, #1
 8000430:	2b1f      	cmp	r3, #31
 8000432:	d878      	bhi.n	8000526 <GET_CRLH_Position+0x1a6>
 8000434:	a201      	add	r2, pc, #4	; (adr r2, 800043c <GET_CRLH_Position+0xbc>)
 8000436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043a:	bf00      	nop
 800043c:	080004c3 	.word	0x080004c3
 8000440:	080004c9 	.word	0x080004c9
 8000444:	08000527 	.word	0x08000527
 8000448:	080004cf 	.word	0x080004cf
 800044c:	08000527 	.word	0x08000527
 8000450:	08000527 	.word	0x08000527
 8000454:	08000527 	.word	0x08000527
 8000458:	080004d5 	.word	0x080004d5
 800045c:	08000527 	.word	0x08000527
 8000460:	08000527 	.word	0x08000527
 8000464:	08000527 	.word	0x08000527
 8000468:	08000527 	.word	0x08000527
 800046c:	08000527 	.word	0x08000527
 8000470:	08000527 	.word	0x08000527
 8000474:	08000527 	.word	0x08000527
 8000478:	080004db 	.word	0x080004db
 800047c:	08000527 	.word	0x08000527
 8000480:	08000527 	.word	0x08000527
 8000484:	08000527 	.word	0x08000527
 8000488:	08000527 	.word	0x08000527
 800048c:	08000527 	.word	0x08000527
 8000490:	08000527 	.word	0x08000527
 8000494:	08000527 	.word	0x08000527
 8000498:	08000527 	.word	0x08000527
 800049c:	08000527 	.word	0x08000527
 80004a0:	08000527 	.word	0x08000527
 80004a4:	08000527 	.word	0x08000527
 80004a8:	08000527 	.word	0x08000527
 80004ac:	08000527 	.word	0x08000527
 80004b0:	08000527 	.word	0x08000527
 80004b4:	08000527 	.word	0x08000527
 80004b8:	080004e1 	.word	0x080004e1
 80004bc:	2b40      	cmp	r3, #64	; 0x40
 80004be:	d012      	beq.n	80004e6 <GET_CRLH_Position+0x166>
	case PIN12 :Position=16  ; break;
	case PIN13 :Position=20  ; break;
	case PIN14 :Position=24  ; break;
	case PIN15 :Position=28  ; break;
	case Allpins:	;break;
	default : ;break;
 80004c0:	e031      	b.n	8000526 <GET_CRLH_Position+0x1a6>
	case PIN0  :Position=0   ; break;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
 80004c6:	e02f      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN1  :Position=4   ; break;
 80004c8:	2304      	movs	r3, #4
 80004ca:	73fb      	strb	r3, [r7, #15]
 80004cc:	e02c      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN2  :Position=8   ; break;
 80004ce:	2308      	movs	r3, #8
 80004d0:	73fb      	strb	r3, [r7, #15]
 80004d2:	e029      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN3  :Position=12  ; break;
 80004d4:	230c      	movs	r3, #12
 80004d6:	73fb      	strb	r3, [r7, #15]
 80004d8:	e026      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN4  :Position=16  ; break;
 80004da:	2310      	movs	r3, #16
 80004dc:	73fb      	strb	r3, [r7, #15]
 80004de:	e023      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN5  :Position=20  ; break;
 80004e0:	2314      	movs	r3, #20
 80004e2:	73fb      	strb	r3, [r7, #15]
 80004e4:	e020      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN6  :Position=24  ; break;
 80004e6:	2318      	movs	r3, #24
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	e01d      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN7  :Position=28  ; break;
 80004ec:	231c      	movs	r3, #28
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e01a      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN8  :Position=0   ; break;
 80004f2:	2300      	movs	r3, #0
 80004f4:	73fb      	strb	r3, [r7, #15]
 80004f6:	e017      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN9  :Position=4   ; break;
 80004f8:	2304      	movs	r3, #4
 80004fa:	73fb      	strb	r3, [r7, #15]
 80004fc:	e014      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN10 :Position=8   ; break;
 80004fe:	2308      	movs	r3, #8
 8000500:	73fb      	strb	r3, [r7, #15]
 8000502:	e011      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN11 :Position=12  ; break;
 8000504:	230c      	movs	r3, #12
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	e00e      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN12 :Position=16  ; break;
 800050a:	2310      	movs	r3, #16
 800050c:	73fb      	strb	r3, [r7, #15]
 800050e:	e00b      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN13 :Position=20  ; break;
 8000510:	2314      	movs	r3, #20
 8000512:	73fb      	strb	r3, [r7, #15]
 8000514:	e008      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN14 :Position=24  ; break;
 8000516:	2318      	movs	r3, #24
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	e005      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case PIN15 :Position=28  ; break;
 800051c:	231c      	movs	r3, #28
 800051e:	73fb      	strb	r3, [r7, #15]
 8000520:	e002      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	case Allpins:	;break;
 8000522:	bf00      	nop
 8000524:	e000      	b.n	8000528 <GET_CRLH_Position+0x1a8>
	default : ;break;
 8000526:	bf00      	nop
	}

	return Position;
 8000528:	7bfb      	ldrb	r3, [r7, #15]

}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <GPIO_u8PinInit>:
 *
 * Return:	ErrorState , Type:uint8_t
 *
 ******************************************************************************/
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_S* PinConfig)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	uint8_t LocalErrorStatue=OK ;
 800053c:	2300      	movs	r3, #0
 800053e:	75fb      	strb	r3, [r7, #23]
	//Port configuration register low (GPIOx_CRL) config pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  config pins 8 -> 15
	volatile uint32_t* configReg = NULL ;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
	volatile uint8_t PIN = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
	configReg = (PinConfig->PinNumber < PIN8) ? &GPIOPORT[PinConfig->PortNum] ->CRL  : &GPIOPORT[PinConfig->PortNum] ->CRH  ;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	885b      	ldrh	r3, [r3, #2]
 800054c:	2bff      	cmp	r3, #255	; 0xff
 800054e:	d806      	bhi.n	800055e <GPIO_u8PinInit+0x2a>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4b4f      	ldr	r3, [pc, #316]	; (8000694 <GPIO_u8PinInit+0x160>)
 8000558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055c:	e006      	b.n	800056c <GPIO_u8PinInit+0x38>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <GPIO_u8PinInit+0x160>)
 8000566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800056a:	3304      	adds	r3, #4
 800056c:	613b      	str	r3, [r7, #16]

	// clear CNF[1:0] & MODE[1:0]
	(*configReg) &= ~(0xF << GET_CRLH_Position(PinConfig->PinNumber));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	885b      	ldrh	r3, [r3, #2]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff04 	bl	8000380 <GET_CRLH_Position>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	230f      	movs	r3, #15
 800057e:	4093      	lsls	r3, r2
 8000580:	43da      	mvns	r2, r3
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	401a      	ands	r2, r3
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	601a      	str	r2, [r3, #0]

	//if pin is OUTPUT
	if (PinConfig->Mode == GPIO_Output_PUSHPULL || PinConfig->Mode == GPIO_Output_OPENDRAIN || PinConfig->Mode == GPIO_AF_PP || PinConfig->Mode == GPIO_AF_OD)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	2b04      	cmp	r3, #4
 8000592:	d00b      	beq.n	80005ac <GPIO_u8PinInit+0x78>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	2b05      	cmp	r3, #5
 800059a:	d007      	beq.n	80005ac <GPIO_u8PinInit+0x78>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	2b06      	cmp	r3, #6
 80005a2:	d003      	beq.n	80005ac <GPIO_u8PinInit+0x78>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	2b07      	cmp	r3, #7
 80005aa:	d10f      	bne.n	80005cc <GPIO_u8PinInit+0x98>
	{
		//Set CNF[1:0] & MODE[1:0]
		PIN = (((PinConfig->Mode - 4) << 2) | (PinConfig->Speed)) & 0x0F ;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	3b04      	subs	r3, #4
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	795b      	ldrb	r3, [r3, #5]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e04d      	b.n	8000668 <GPIO_u8PinInit+0x134>

	}
	//if pin is INPUT
	else //MODE = 00 input mode (reset state)
	{
		if ( (PinConfig->Mode == GPIO_INPUT_Floating) | (PinConfig->Mode == GPIO_ANALOG))
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	bf0c      	ite	eq
 80005d4:	2301      	moveq	r3, #1
 80005d6:	2300      	movne	r3, #0
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bf0c      	ite	eq
 80005e2:	2301      	moveq	r3, #1
 80005e4:	2300      	movne	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d008      	beq.n	8000602 <GPIO_u8PinInit+0xce>
		{
			PIN = (((PinConfig->Mode ) << 2) | (UNUSED)) & 0x0F ;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e032      	b.n	8000668 <GPIO_u8PinInit+0x134>
		}
		else if (PinConfig->Mode == GPIO_INPUT_Floating)//considered as INPUT Floating
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d102      	bne.n	8000610 <GPIO_u8PinInit+0xdc>
		{
			PIN = (((GPIO_INPUT_Floating) << 2) | (UNUSED)) & 0x0F ;
 800060a:	2304      	movs	r3, #4
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e02b      	b.n	8000668 <GPIO_u8PinInit+0x134>
		}
		else // PU PD INPUT
		{
			PIN = (((GPIO_INPUT_PU) << 2) | (UNUSED)) & 0x0F ;
 8000610:	2308      	movs	r3, #8
 8000612:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->Mode == GPIO_INPUT_PU)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d112      	bne.n	8000642 <GPIO_u8PinInit+0x10e>
			{
				//ODR = 1 INPUT Pull Up :Table 20. Port bit configuration table
				GPIOPORT[PinConfig->PortNum] ->ODR  |= PinConfig->PinNumber;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <GPIO_u8PinInit+0x160>)
 8000624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000628:	68da      	ldr	r2, [r3, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	885b      	ldrh	r3, [r3, #2]
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <GPIO_u8PinInit+0x160>)
 8000638:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800063c:	430a      	orrs	r2, r1
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	e012      	b.n	8000668 <GPIO_u8PinInit+0x134>
			}else
			{
				//ODR = 0 INPUT Pull Down :Table 20. Port bit configuration table
				GPIOPORT[PinConfig->PortNum] ->ODR  &= ~(PinConfig->PinNumber);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <GPIO_u8PinInit+0x160>)
 800064a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	885b      	ldrh	r3, [r3, #2]
 8000654:	43db      	mvns	r3, r3
 8000656:	4619      	mov	r1, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <GPIO_u8PinInit+0x160>)
 8000660:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000664:	400a      	ands	r2, r1
 8000666:	60da      	str	r2, [r3, #12]
		}

	}

	//Write on CRL or CRH
	(*configReg) |= ( (PIN) << GET_CRLH_Position(PinConfig->PinNumber)) ;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461c      	mov	r4, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	885b      	ldrh	r3, [r3, #2]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fe84 	bl	8000380 <GET_CRLH_Position>
 8000678:	4603      	mov	r3, r0
 800067a:	fa04 f203 	lsl.w	r2, r4, r3
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	431a      	orrs	r2, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	601a      	str	r2, [r3, #0]

	return LocalErrorStatue ;
 8000688:	7dfb      	ldrb	r3, [r7, #23]

}
 800068a:	4618      	mov	r0, r3
 800068c:	371c      	adds	r7, #28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <GPIO_USARTSetPins>:
 *
 * @param Local_USARTID
 * @return
 */
uint8_t GPIO_USARTSetPins(GPIO_ID_PERIPHERAL_E Local_USARTID)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	; 0x40
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	uint8_t LocalErrorStatue = OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	switch(Local_USARTID)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d05f      	beq.n	800076e <GPIO_USARTSetPins+0xd6>
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	f300 808b 	bgt.w	80007ca <GPIO_USARTSetPins+0x132>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <GPIO_USARTSetPins+0x26>
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d02d      	beq.n	8000718 <GPIO_USARTSetPins+0x80>
		;break;



	default: //error ;
		break;
 80006bc:	e085      	b.n	80007ca <GPIO_USARTSetPins+0x132>
		GPIO_PinConfig_S GPIO_PIN1[2]=
 80006be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80006d2:	2306      	movs	r3, #6
 80006d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80006d8:	2302      	movs	r3, #2
 80006da:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80006de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80006e4:	2308      	movs	r3, #8
 80006e6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		for(counter1 = 0 ; counter1 < 2 ; counter1++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80006f0:	e00d      	b.n	800070e <GPIO_USARTSetPins+0x76>
			GPIO_u8PinInit(&GPIO_PIN1[counter1]);
 80006f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	4413      	add	r3, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff18 	bl	8000534 <GPIO_u8PinInit>
		for(counter1 = 0 ; counter1 < 2 ; counter1++)
 8000704:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000708:	3301      	adds	r3, #1
 800070a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800070e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000712:	2b01      	cmp	r3, #1
 8000714:	d9ed      	bls.n	80006f2 <GPIO_USARTSetPins+0x5a>
		;break;
 8000716:	e059      	b.n	80007cc <GPIO_USARTSetPins+0x134>
		GPIO_PinConfig_S GPIO_PIN2[2]=
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	2304      	movs	r3, #4
 8000728:	83fb      	strh	r3, [r7, #30]
 800072a:	2306      	movs	r3, #6
 800072c:	f887 3020 	strb.w	r3, [r7, #32]
 8000730:	2302      	movs	r3, #2
 8000732:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000736:	2308      	movs	r3, #8
 8000738:	84fb      	strh	r3, [r7, #38]	; 0x26
 800073a:	2308      	movs	r3, #8
 800073c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		for(counter2 = 0 ; counter2 < 2 ; counter2++)
 8000740:	2300      	movs	r3, #0
 8000742:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000746:	e00d      	b.n	8000764 <GPIO_USARTSetPins+0xcc>
			GPIO_u8PinInit(&GPIO_PIN2[counter2]);
 8000748:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800074c:	f107 021c 	add.w	r2, r7, #28
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	4413      	add	r3, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff feed 	bl	8000534 <GPIO_u8PinInit>
		for(counter2 = 0 ; counter2 < 2 ; counter2++)
 800075a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800075e:	3301      	adds	r3, #1
 8000760:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000764:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000768:	2b01      	cmp	r3, #1
 800076a:	d9ed      	bls.n	8000748 <GPIO_USARTSetPins+0xb0>
		;break;
 800076c:	e02e      	b.n	80007cc <GPIO_USARTSetPins+0x134>
		GPIO_PinConfig_S GPIO_PIN3[2]=
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	2301      	movs	r3, #1
 800077e:	81bb      	strh	r3, [r7, #12]
 8000780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000784:	81fb      	strh	r3, [r7, #14]
 8000786:	2306      	movs	r3, #6
 8000788:	743b      	strb	r3, [r7, #16]
 800078a:	2302      	movs	r3, #2
 800078c:	747b      	strb	r3, [r7, #17]
 800078e:	2301      	movs	r3, #1
 8000790:	82bb      	strh	r3, [r7, #20]
 8000792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000796:	82fb      	strh	r3, [r7, #22]
 8000798:	2308      	movs	r3, #8
 800079a:	763b      	strb	r3, [r7, #24]
		for(counter3 = 0 ; counter3 < 2 ; counter3++)
 800079c:	2300      	movs	r3, #0
 800079e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80007a2:	e00d      	b.n	80007c0 <GPIO_USARTSetPins+0x128>
			GPIO_u8PinInit(&GPIO_PIN3[counter3]);
 80007a4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007a8:	f107 020c 	add.w	r2, r7, #12
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	4413      	add	r3, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff febf 	bl	8000534 <GPIO_u8PinInit>
		for(counter3 = 0 ; counter3 < 2 ; counter3++)
 80007b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007ba:	3301      	adds	r3, #1
 80007bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80007c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d9ed      	bls.n	80007a4 <GPIO_USARTSetPins+0x10c>
		;break;
 80007c8:	e000      	b.n	80007cc <GPIO_USARTSetPins+0x134>
		break;
 80007ca:	bf00      	nop
	}

	return LocalErrorStatue;
 80007cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c

}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3740      	adds	r7, #64	; 0x40
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <GPIO_SPISetPins>:
 * Return:		Value ErrorState , Type:uint8_t
 *
 *
 ******************************************************/
uint8_t GPIO_SPISetPins(GPIO_ID_PERIPHERAL_E LocalSPIID , MASTER_SLAVE_STATUE_E MS_Statue_ID , NSS_STATUE_E NSS_STATUE)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0ac      	sub	sp, #176	; 0xb0
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	460b      	mov	r3, r1
 80007e4:	71bb      	strb	r3, [r7, #6]
 80007e6:	4613      	mov	r3, r2
 80007e8:	717b      	strb	r3, [r7, #5]
	uint8_t LocalErrorStatue = OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	switch(LocalSPIID)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d003      	beq.n	80007fe <GPIO_SPISetPins+0x26>
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	f000 80bc 	beq.w	8000974 <GPIO_SPISetPins+0x19c>

			}

	default:
		//error
		break;
 80007fc:	e18c      	b.n	8000b18 <GPIO_SPISetPins+0x340>
		if(MS_Statue_ID == SPI_MASTER_ID)
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d15d      	bne.n	80008c0 <GPIO_SPISetPins+0xe8>
			if(NSS_STATUE == SPI_NSS_HW_MASTER_SS_OP_DISABLE)
 8000804:	797b      	ldrb	r3, [r7, #5]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d110      	bne.n	800082c <GPIO_SPISetPins+0x54>
				GPIO_PinConfig_S SPI1_NSS_PIN=
 800080a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	2310      	movs	r3, #16
 8000816:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800081a:	2301      	movs	r3, #1
 800081c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
				GPIO_u8PinInit(&SPI1_NSS_PIN);
 8000820:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fe85 	bl	8000534 <GPIO_u8PinInit>
 800082a:	e012      	b.n	8000852 <GPIO_SPISetPins+0x7a>
				GPIO_PinConfig_S SPI1_NSS_PIN=
 800082c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	2310      	movs	r3, #16
 8000838:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800083c:	2306      	movs	r3, #6
 800083e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
 8000842:	2302      	movs	r3, #2
 8000844:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
				GPIO_u8PinInit(&SPI1_NSS_PIN);
 8000848:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe71 	bl	8000534 <GPIO_u8PinInit>
			GPIO_PinConfig_S SPI1_SCK_PIN=
 8000852:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	2320      	movs	r3, #32
 800085e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000862:	2306      	movs	r3, #6
 8000864:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8000868:	2302      	movs	r3, #2
 800086a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			GPIO_u8PinInit(&SPI1_SCK_PIN);
 800086e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe5e 	bl	8000534 <GPIO_u8PinInit>
			GPIO_PinConfig_S SPI1_MISO_PIN=
 8000878:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8000888:	2301      	movs	r3, #1
 800088a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
			GPIO_u8PinInit(&SPI1_MISO_PIN);
 800088e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe4e 	bl	8000534 <GPIO_u8PinInit>
			GPIO_PinConfig_S SPI1_MOSI_PIN=
 8000898:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80008a8:	2306      	movs	r3, #6
 80008aa:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 80008ae:	2302      	movs	r3, #2
 80008b0:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			GPIO_u8PinInit(&SPI1_MOSI_PIN);
 80008b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe3b 	bl	8000534 <GPIO_u8PinInit>
 80008be:	e059      	b.n	8000974 <GPIO_SPISetPins+0x19c>
			if(NSS_STATUE == SPI_NSS_HW_MASTER_SS_OP_DISABLE)
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d110      	bne.n	80008e8 <GPIO_SPISetPins+0x110>
				GPIO_PinConfig_S SPI1_NSS_PIN=
 80008c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	2310      	movs	r3, #16
 80008d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80008d6:	2301      	movs	r3, #1
 80008d8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
				GPIO_u8PinInit(&SPI1_NSS_PIN);
 80008dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe27 	bl	8000534 <GPIO_u8PinInit>
 80008e6:	e012      	b.n	800090e <GPIO_SPISetPins+0x136>
				GPIO_PinConfig_S SPI1_NSS_PIN=
 80008e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	2310      	movs	r3, #16
 80008f4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80008f8:	2306      	movs	r3, #6
 80008fa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80008fe:	2302      	movs	r3, #2
 8000900:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				GPIO_u8PinInit(&SPI1_NSS_PIN);
 8000904:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fe13 	bl	8000534 <GPIO_u8PinInit>
			GPIO_PinConfig_S SPI1_SCK_PIN=
 800090e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	2320      	movs	r3, #32
 800091a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800091e:	2301      	movs	r3, #1
 8000920:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			GPIO_u8PinInit(&SPI1_SCK_PIN);
 8000924:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe03 	bl	8000534 <GPIO_u8PinInit>
			GPIO_PinConfig_S SPI1_MISO_PIN=
 800092e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800093e:	2306      	movs	r3, #6
 8000940:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8000944:	2302      	movs	r3, #2
 8000946:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			GPIO_u8PinInit(&SPI1_MISO_PIN);
 800094a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fdf0 	bl	8000534 <GPIO_u8PinInit>
			GPIO_PinConfig_S SPI1_MOSI_PIN=
 8000954:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000964:	2301      	movs	r3, #1
 8000966:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			GPIO_u8PinInit(&SPI1_MOSI_PIN);
 800096a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fde0 	bl	8000534 <GPIO_u8PinInit>
		if(MS_Statue_ID == SPI_MASTER_ID)
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d16d      	bne.n	8000a56 <GPIO_SPISetPins+0x27e>
				if(NSS_STATUE == SPI_NSS_HW_MASTER_SS_OP_DISABLE)
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d112      	bne.n	80009a6 <GPIO_SPISetPins+0x1ce>
					GPIO_PinConfig_S SPI1_NSS_PIN=
 8000980:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	2301      	movs	r3, #1
 800098c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000994:	2301      	movs	r3, #1
 8000996:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					GPIO_u8PinInit(&SPI1_NSS_PIN);
 800099a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fdc8 	bl	8000534 <GPIO_u8PinInit>
 80009a4:	e014      	b.n	80009d0 <GPIO_SPISetPins+0x1f8>
					GPIO_PinConfig_S SPI1_NSS_PIN=
 80009a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	2301      	movs	r3, #1
 80009b2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80009ba:	2306      	movs	r3, #6
 80009bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80009c0:	2302      	movs	r3, #2
 80009c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					GPIO_u8PinInit(&SPI1_NSS_PIN);
 80009c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fdb2 	bl	8000534 <GPIO_u8PinInit>
				GPIO_PinConfig_S SPI1_SCK_PIN=
 80009d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	2301      	movs	r3, #1
 80009dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80009e8:	2306      	movs	r3, #6
 80009ea:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80009ee:	2302      	movs	r3, #2
 80009f0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
				GPIO_u8PinInit(&SPI1_SCK_PIN);
 80009f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fd9b 	bl	8000534 <GPIO_u8PinInit>
				GPIO_PinConfig_S SPI1_MISO_PIN=
 80009fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000a0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000a16:	2301      	movs	r3, #1
 8000a18:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				GPIO_u8PinInit(&SPI1_MISO_PIN);
 8000a1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fd87 	bl	8000534 <GPIO_u8PinInit>
				GPIO_PinConfig_S SPI1_MOSI_PIN=
 8000a26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	2301      	movs	r3, #1
 8000a32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000a3e:	2306      	movs	r3, #6
 8000a40:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000a44:	2302      	movs	r3, #2
 8000a46:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				GPIO_u8PinInit(&SPI1_MOSI_PIN);
 8000a4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd70 	bl	8000534 <GPIO_u8PinInit>
		break;
 8000a54:	e060      	b.n	8000b18 <GPIO_SPISetPins+0x340>
				if(NSS_STATUE == SPI_NSS_HW_MASTER_SS_OP_DISABLE)
 8000a56:	797b      	ldrb	r3, [r7, #5]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <GPIO_SPISetPins+0x2a8>
					GPIO_PinConfig_S SPI1_NSS_PIN=
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	2301      	movs	r3, #1
 8000a68:	82bb      	strh	r3, [r7, #20]
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	82fb      	strh	r3, [r7, #22]
 8000a70:	2301      	movs	r3, #1
 8000a72:	763b      	strb	r3, [r7, #24]
					GPIO_u8PinInit(&SPI1_NSS_PIN);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd5b 	bl	8000534 <GPIO_u8PinInit>
 8000a7e:	e012      	b.n	8000aa6 <GPIO_SPISetPins+0x2ce>
					GPIO_PinConfig_S SPI1_NSS_PIN=
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	81bb      	strh	r3, [r7, #12]
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	81fb      	strh	r3, [r7, #14]
 8000a94:	2306      	movs	r3, #6
 8000a96:	743b      	strb	r3, [r7, #16]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	747b      	strb	r3, [r7, #17]
					GPIO_u8PinInit(&SPI1_NSS_PIN);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fd47 	bl	8000534 <GPIO_u8PinInit>
				GPIO_PinConfig_S SPI1_SCK_PIN=
 8000aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000aba:	2301      	movs	r3, #1
 8000abc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				GPIO_u8PinInit(&SPI1_SCK_PIN);
 8000ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fd35 	bl	8000534 <GPIO_u8PinInit>
				GPIO_PinConfig_S SPI1_MISO_PIN=
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ad8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000adc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ade:	2306      	movs	r3, #6
 8000ae0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				GPIO_u8PinInit(&SPI1_MISO_PIN);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd20 	bl	8000534 <GPIO_u8PinInit>
				GPIO_PinConfig_S SPI1_MOSI_PIN=
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	2301      	movs	r3, #1
 8000b00:	83bb      	strh	r3, [r7, #28]
 8000b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b06:	83fb      	strh	r3, [r7, #30]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f887 3020 	strb.w	r3, [r7, #32]
				GPIO_u8PinInit(&SPI1_MOSI_PIN);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd0e 	bl	8000534 <GPIO_u8PinInit>
		break;
 8000b18:	bf00      	nop
	}




	return LocalErrorStatue;
 8000b1a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	37b0      	adds	r7, #176	; 0xb0
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <NVICEnable>:
 * @post   :
 * @param  : IRQ Number (IRQNUM_E)
 * @return : LocalErrorStatus
 */
uint8_t NVICEnable (IRQNUM_E IRQ )
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	uint8_t LocalErrorState = OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]

	uint8_t LocalRegisterNum = IRQ/32 ;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	095b      	lsrs	r3, r3, #5
 8000b3a:	73bb      	strb	r3, [r7, #14]

	uint8_t LocalBitNum = IRQ%32;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	737b      	strb	r3, [r7, #13]

	if(IRQ<MAX_IRQ)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b5f      	cmp	r3, #95	; 0x5f
 8000b48:	d808      	bhi.n	8000b5c <NVICEnable+0x34>
	{
		ATOMIC_SET_BIT(NVIC->NVIC_ISER[LocalRegisterNum],LocalBitNum);
 8000b4a:	7b7b      	ldrb	r3, [r7, #13]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	fa02 f103 	lsl.w	r1, r2, r3
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <NVICEnable+0x44>)
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b5a:	e001      	b.n	8000b60 <NVICEnable+0x38>
	}
	else
	{
		LocalErrorState =NOK;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
	}
	return LocalErrorState;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <NVIC_SetPendingFlag>:
 * @post
 * @param  : IRQ Number (IRQNUM_E)
 * @return : LocalErrorStatus
 */
uint8_t NVIC_SetPendingFlag(IRQNUM_E IRQ)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	uint8_t LocalErrorState = OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]

	uint8_t LocalRegisterNum = IRQ/32 ;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	73bb      	strb	r3, [r7, #14]

	uint8_t LocalBitNum = IRQ%32;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 031f 	and.w	r3, r3, #31
 8000b8a:	737b      	strb	r3, [r7, #13]

	if(IRQ<MAX_IRQ)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b5f      	cmp	r3, #95	; 0x5f
 8000b90:	d809      	bhi.n	8000ba6 <NVIC_SetPendingFlag+0x36>
	{
		ATOMIC_SET_BIT(NVIC->NVIC_ISPR[LocalRegisterNum],LocalBitNum);
 8000b92:	7b7b      	ldrb	r3, [r7, #13]
 8000b94:	2201      	movs	r2, #1
 8000b96:	fa02 f103 	lsl.w	r1, r2, r3
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <NVIC_SetPendingFlag+0x48>)
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	3340      	adds	r3, #64	; 0x40
 8000ba0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ba4:	e001      	b.n	8000baa <NVIC_SetPendingFlag+0x3a>
	}
	else
	{
		LocalErrorState =NOK;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
	}
	return LocalErrorState;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]


}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <RCC_GetSYSCLCK>:
/**
 *
 * @return : SYSTEM CLCK  Frequency
 */
uint32_t RCC_GetSYSCLCK(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/

	switch( (RCC->CFGR.Reg >>SWS_BIT) & SWS_MASK  )
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <RCC_GetSYSCLCK+0x38>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d00a      	beq.n	8000be4 <RCC_GetSYSCLCK+0x28>
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d80a      	bhi.n	8000be8 <RCC_GetSYSCLCK+0x2c>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <RCC_GetSYSCLCK+0x20>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d002      	beq.n	8000be0 <RCC_GetSYSCLCK+0x24>
	{
	case HSI :  return HSI_CLCK                 ;break;
	case HSE :  return HSE_CLCK                 ;break;
	case PLL :  return PLL_CLCK                 ;break; /*16MHZ*/
	default  :  								;break;
 8000bda:	e005      	b.n	8000be8 <RCC_GetSYSCLCK+0x2c>
	case HSI :  return HSI_CLCK                 ;break;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <RCC_GetSYSCLCK+0x3c>)
 8000bde:	e004      	b.n	8000bea <RCC_GetSYSCLCK+0x2e>
	case HSE :  return HSE_CLCK                 ;break;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <RCC_GetSYSCLCK+0x40>)
 8000be2:	e002      	b.n	8000bea <RCC_GetSYSCLCK+0x2e>
	case PLL :  return PLL_CLCK                 ;break; /*16MHZ*/
 8000be4:	2300      	movs	r3, #0
 8000be6:	e000      	b.n	8000bea <RCC_GetSYSCLCK+0x2e>
	default  :  								;break;
 8000be8:	bf00      	nop
	}




}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	007a1200 	.word	0x007a1200
 8000bfc:	00f42400 	.word	0x00f42400

08000c00 <RCC_GetHCLCK>:
/**
 *
 * @return : HCLCK Frequency
 */
uint32_t RCC_GetHCLCK(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/

	return (RCC_GetSYSCLCK() >> AHBPrescTable[(RCC->CFGR.Reg >> HPRE_BIT ) &HPRE_MASK ] );
 8000c04:	f7ff ffda 	bl	8000bbc <RCC_GetSYSCLCK>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <RCC_GetHCLCK+0x20>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	4903      	ldr	r1, [pc, #12]	; (8000c24 <RCC_GetHCLCK+0x24>)
 8000c16:	5ccb      	ldrb	r3, [r1, r3]
 8000c18:	fa22 f303 	lsr.w	r3, r2, r3


}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000
 8000c24:	0800132c 	.word	0x0800132c

08000c28 <RCC_GetPCLCK1>:
/**
 *
 * @return : PCLCK1 Frequency
 */
uint32_t RCC_GetPCLCK1(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16	 */

	return (RCC_GetHCLCK() >> APBPrescTable[((RCC-> CFGR.Reg )>> PCLCK1_BIT )&PCLCK_MASK] );
 8000c2c:	f7ff ffe8 	bl	8000c00 <RCC_GetHCLCK>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <RCC_GetPCLCK1+0x20>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	4903      	ldr	r1, [pc, #12]	; (8000c4c <RCC_GetPCLCK1+0x24>)
 8000c3e:	5ccb      	ldrb	r3, [r1, r3]
 8000c40:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000c44:	4618      	mov	r0, r3
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	08001324 	.word	0x08001324

08000c50 <RCC_GetPCLCK2>:
/**
 *
 * @return : PCLCK2 Frequency
 */
uint32_t RCC_GetPCLCK2(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/


	return (RCC_GetHCLCK() >> APBPrescTable[((RCC-> CFGR.Reg )>> PCLCK2_BIT )&PCLCK_MASK] );
 8000c54:	f7ff ffd4 	bl	8000c00 <RCC_GetHCLCK>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <RCC_GetPCLCK2+0x20>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	0adb      	lsrs	r3, r3, #11
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	4903      	ldr	r1, [pc, #12]	; (8000c74 <RCC_GetPCLCK2+0x24>)
 8000c66:	5ccb      	ldrb	r3, [r1, r3]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3


}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	08001324 	.word	0x08001324

08000c78 <SPI_Init>:
 * @brief 			: Function Init SPI
 * @param SPIConfig : Constant Pointer To SPI Struct Configuration
 * @return 			: Local Error Statue
 */
uint8_t SPI_Init(const SPI_Config_S* SPIConfig)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

	uint8_t LocalErrorStatue = OK ;
 8000c80:	2300      	movs	r3, #0
 8000c82:	72fb      	strb	r3, [r7, #11]

	/*Init SPI Reg Value For Safety*/

	uint16_t TempReg_CR1=0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	81fb      	strh	r3, [r7, #14]

	uint16_t TempReg_CR2=0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	81bb      	strh	r3, [r7, #12]

	/*For Save Configuration*/
	Global_SPI_Config[SPIConfig->SPI_PERIPHERAL]=SPIConfig;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4a3f      	ldr	r2, [pc, #252]	; (8000d90 <SPI_Init+0x118>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*Clck Enable*/
	switch (SPIConfig->SPI_PERIPHERAL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <SPI_Init+0x30>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d007      	beq.n	8000cb6 <SPI_Init+0x3e>
	{
	case SPI_ONE:	SPI1_CLCK_EN();	break;
	case SPI_TWO:	SPI2_CLCK_EN();	break;
	default     : 	/*error*/		;break;
 8000ca6:	e00d      	b.n	8000cc4 <SPI_Init+0x4c>
	case SPI_ONE:	SPI1_CLCK_EN();	break;
 8000ca8:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <SPI_Init+0x11c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a39      	ldr	r2, [pc, #228]	; (8000d94 <SPI_Init+0x11c>)
 8000cae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	e006      	b.n	8000cc4 <SPI_Init+0x4c>
	case SPI_TWO:	SPI2_CLCK_EN();	break;
 8000cb6:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <SPI_Init+0x11c>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a36      	ldr	r2, [pc, #216]	; (8000d94 <SPI_Init+0x11c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	bf00      	nop
	}

	/*Enable SPI*/
	TempReg_CR1 =CR1_SPE;
 8000cc4:	2340      	movs	r3, #64	; 0x40
 8000cc6:	81fb      	strh	r3, [r7, #14]

	/*Switch Master Or Slave*/
	TempReg_CR1 |= SPIConfig->DeviceMode ;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	81fb      	strh	r3, [r7, #14]

	TempReg_CR1 |= SPIConfig->CommunicationMode;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	885a      	ldrh	r2, [r3, #2]
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	81fb      	strh	r3, [r7, #14]

	TempReg_CR1 |= SPIConfig->FrameFormat;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	89fb      	ldrh	r3, [r7, #14]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	81fb      	strh	r3, [r7, #14]

	TempReg_CR1 |= SPIConfig->DataSize;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	88da      	ldrh	r2, [r3, #6]
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	81fb      	strh	r3, [r7, #14]

	TempReg_CR1 |= SPIConfig->ClckPolarity;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7a1b      	ldrb	r3, [r3, #8]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	81fb      	strh	r3, [r7, #14]

	TempReg_CR1 |= SPIConfig->ClckPhase;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7a5b      	ldrb	r3, [r3, #9]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	81fb      	strh	r3, [r7, #14]

	/*NSS*/

	if(SPIConfig->NSSConfig ==SPI_NSS_HW_Master_SS_OutputEnable )
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	895b      	ldrh	r3, [r3, #10]
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d105      	bne.n	8000d20 <SPI_Init+0xa8>
	{

		TempReg_CR2 |=SPIConfig->NSSConfig ;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	895a      	ldrh	r2, [r3, #10]
 8000d18:	89bb      	ldrh	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	81bb      	strh	r3, [r7, #12]
 8000d1e:	e010      	b.n	8000d42 <SPI_Init+0xca>

	}
	else if(SPIConfig->NSSConfig ==SPI_NSS_HW_Master_SS_OutputDisable)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	895b      	ldrh	r3, [r3, #10]
 8000d24:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d105      	bne.n	8000d38 <SPI_Init+0xc0>
	{

		TempReg_CR2 &=SPIConfig->NSSConfig ;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	895a      	ldrh	r2, [r3, #10]
 8000d30:	89bb      	ldrh	r3, [r7, #12]
 8000d32:	4013      	ands	r3, r2
 8000d34:	81bb      	strh	r3, [r7, #12]
 8000d36:	e004      	b.n	8000d42 <SPI_Init+0xca>

	}
	else
	{
		TempReg_CR1 |=SPIConfig->NSSConfig ;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	895a      	ldrh	r2, [r3, #10]
 8000d3c:	89fb      	ldrh	r3, [r7, #14]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	81fb      	strh	r3, [r7, #14]
	}

	/*BaudRatePrescaller*/
	TempReg_CR1 |= SPIConfig->BaudRatePrescaller ;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7b1b      	ldrb	r3, [r3, #12]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	81fb      	strh	r3, [r7, #14]

	if(SPIConfig->InterruptEnable != SPI_IE_NONE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7b5b      	ldrb	r3, [r3, #13]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d005      	beq.n	8000d62 <SPI_Init+0xea>
	{
		TempReg_CR2 |=SPIConfig->InterruptEnable;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7b5b      	ldrb	r3, [r3, #13]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	89bb      	ldrh	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	81bb      	strh	r3, [r7, #12]
	}

	SPI_PeripheralArray[SPIConfig->SPI_PERIPHERAL]->CR1 =TempReg_CR1;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <SPI_Init+0x120>)
 8000d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6e:	89fa      	ldrh	r2, [r7, #14]
 8000d70:	601a      	str	r2, [r3, #0]

	SPI_PeripheralArray[SPIConfig->SPI_PERIPHERAL]->CR2 =TempReg_CR2;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <SPI_Init+0x120>)
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	89ba      	ldrh	r2, [r7, #12]
 8000d80:	605a      	str	r2, [r3, #4]


	return LocalErrorStatue ;
 8000d82:	7afb      	ldrb	r3, [r7, #11]

}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	2000008c 	.word	0x2000008c
 8000d94:	40021000 	.word	0x40021000
 8000d98:	2000001c 	.word	0x2000001c

08000d9c <SPI_U16TXRX>:
 * @param PxBuffer 		: Pointer To Buffer Which Send
 * @param PollingStatue : Polling Statue
 * @return 				: Local Error Statue
 */
uint8_t SPI_U16TXRX(SPI_TypeDef_S* SPIx , uint16_t* PxBuffer ,Polling_Mechanism_E PollingStatue)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	4613      	mov	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]

	uint8_t LocalErrorStatue = OK ;
 8000daa:	2300      	movs	r3, #0
 8000dac:	75fb      	strb	r3, [r7, #23]



	if(PollingStatue == Polling_Enable)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d106      	bne.n	8000dc2 <SPI_U16TXRX+0x26>
	{
		while(!((SPIx->SR)&SR_TXE));
 8000db4:	bf00      	nop
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f9      	beq.n	8000db6 <SPI_U16TXRX+0x1a>
	}
	SPIx->DR = *PxBuffer;
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	60da      	str	r2, [r3, #12]

	if(PollingStatue == Polling_Enable)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d106      	bne.n	8000de0 <SPI_U16TXRX+0x44>
		while(!((SPIx->SR)&SR_RXNE));
 8000dd2:	bf00      	nop
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f9      	beq.n	8000dd4 <SPI_U16TXRX+0x38>
	*PxBuffer = SPIx->DR;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	801a      	strh	r2, [r3, #0]


	return LocalErrorStatue ;
 8000dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
	...

08000df8 <SPI1_IRQHandler>:

void SPI1_IRQHandler()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	struct IRQ_SRC_S IRQ_SRC;

	IRQ_SRC.TXE= ((SPI1->SR & (1<<1) )>>1);
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <SPI1_IRQHandler+0x54>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	085b      	lsrs	r3, r3, #1
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	793b      	ldrb	r3, [r7, #4]
 8000e0c:	f362 0300 	bfi	r3, r2, #0, #1
 8000e10:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE= ((SPI1->SR & (1<<0) )>>0);
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <SPI1_IRQHandler+0x54>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	793b      	ldrb	r3, [r7, #4]
 8000e1e:	f362 0341 	bfi	r3, r2, #1, #1
 8000e22:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERRI= ((SPI1->SR & (1<<4) )>>4);
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <SPI1_IRQHandler+0x54>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	793b      	ldrb	r3, [r7, #4]
 8000e32:	f362 0382 	bfi	r3, r2, #2, #1
 8000e36:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[0]->SPI_PtrCallBack(IRQ_SRC);
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SPI1_IRQHandler+0x58>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	7938      	ldrb	r0, [r7, #4]
 8000e40:	4798      	blx	r3

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	2000008c 	.word	0x2000008c

08000e54 <SPI2_IRQHandler>:
void SPI2_IRQHandler()
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	struct IRQ_SRC_S IRQ_SRC;

	IRQ_SRC.TXE= ((SPI2->SR & (1<<1) )>>1);
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <SPI2_IRQHandler+0x54>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	085b      	lsrs	r3, r3, #1
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	793b      	ldrb	r3, [r7, #4]
 8000e68:	f362 0300 	bfi	r3, r2, #0, #1
 8000e6c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE= ((SPI2->SR & (1<<0) )>>0);
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <SPI2_IRQHandler+0x54>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	f362 0341 	bfi	r3, r2, #1, #1
 8000e7e:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERRI= ((SPI2->SR & (1<<4) )>>4);
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <SPI2_IRQHandler+0x54>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	793b      	ldrb	r3, [r7, #4]
 8000e8e:	f362 0382 	bfi	r3, r2, #2, #1
 8000e92:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[1]->SPI_PtrCallBack(IRQ_SRC);
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SPI2_IRQHandler+0x58>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	7938      	ldrb	r0, [r7, #4]
 8000e9c:	4798      	blx	r3

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40003800 	.word	0x40003800
 8000eac:	2000008c 	.word	0x2000008c

08000eb0 <USART_Init>:
 *
 * Return:	UART_ERR_Statue , Type:enum
 *
 ******************************************************************************/
UART_ERR_Statue USART_Init( USART_HandleTypeDef* Huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint8_t LocalErrorStatue = NO_EROR;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	75fb      	strb	r3, [r7, #23]

	uint32_t LocalU32_PCLCKValue , LocalU32_BRRValue ;

	/*For Other Configuration*/
	Global_USART_CONFIG=Huart;
 8000ebc:	4a82      	ldr	r2, [pc, #520]	; (80010c8 <USART_Init+0x218>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]


	/*Enable RCC For USART*/
	switch (Huart->USART_SELECTION)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d014      	beq.n	8000ef4 <USART_Init+0x44>
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	dc19      	bgt.n	8000f02 <USART_Init+0x52>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <USART_Init+0x28>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d007      	beq.n	8000ee6 <USART_Init+0x36>
 8000ed6:	e014      	b.n	8000f02 <USART_Init+0x52>
	{
	case USART_ONE   : RCC_USART1_CLCK_EN() ; break;
 8000ed8:	4b7c      	ldr	r3, [pc, #496]	; (80010cc <USART_Init+0x21c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a7b      	ldr	r2, [pc, #492]	; (80010cc <USART_Init+0x21c>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	e010      	b.n	8000f08 <USART_Init+0x58>
	case USART_TWO   : RCC_USART2_CLCK_EN() ; break;
 8000ee6:	4b79      	ldr	r3, [pc, #484]	; (80010cc <USART_Init+0x21c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a78      	ldr	r2, [pc, #480]	; (80010cc <USART_Init+0x21c>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	e009      	b.n	8000f08 <USART_Init+0x58>
	case USART_THREE : RCC_USART3_CLCK_EN() ; break;
 8000ef4:	4b75      	ldr	r3, [pc, #468]	; (80010cc <USART_Init+0x21c>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4a74      	ldr	r2, [pc, #464]	; (80010cc <USART_Init+0x21c>)
 8000efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efe:	61d3      	str	r3, [r2, #28]
 8000f00:	e002      	b.n	8000f08 <USART_Init+0x58>
	default :  LocalErrorStatue = NOK ; break;
 8000f02:	2301      	movs	r3, #1
 8000f04:	75fb      	strb	r3, [r7, #23]
 8000f06:	bf00      	nop
	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	current
	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	0: USART prescaler and outputs disabled
	1: USART enabled*/
	USART[Huart->USART_SELECTION]->CR1 |= (Huart->USART_STATUE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b70      	ldr	r3, [pc, #448]	; (80010d0 <USART_Init+0x220>)
 8000f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	885b      	ldrh	r3, [r3, #2]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <USART_Init+0x220>)
 8000f24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	60da      	str	r2, [r3, #12]
		This bit enables the receiver. It is set and cleared by software.
		0: Receiver is disabled
		1: Receiver is enabled and begins searching for a start bit
	 */

	USART[Huart->USART_SELECTION]->CR1 |= (Huart->USART_MODE);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <USART_Init+0x220>)
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	791b      	ldrb	r3, [r3, #4]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <USART_Init+0x220>)
 8000f48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	60da      	str	r2, [r3, #12]
	This bit determines the word length. It is set or cleared by software.
	0: 1 Start bit, 8 Data bits, n Stop bit
	1: 1 Start bit, 9 Data bits, n Stop bit
	Note: The M bit must not be modified during a data transfer (both transmission and reception)*/

	USART[Huart->USART_SELECTION]->CR1 |= (Huart->USART_DATA_PAYLOAD) ;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b5e      	ldr	r3, [pc, #376]	; (80010d0 <USART_Init+0x220>)
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	88db      	ldrh	r3, [r3, #6]
 8000f62:	4619      	mov	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <USART_Init+0x220>)
 8000f6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]
	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	0: Even parity
	1: Odd parity   */

	USART[Huart->USART_SELECTION]->CR1 |= (Huart->PARITY) ;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <USART_Init+0x220>)
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	899b      	ldrh	r3, [r3, #12]
 8000f86:	4619      	mov	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <USART_Init+0x220>)
 8000f90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	60da      	str	r2, [r3, #12]
	01: 0.5 Stop bit
	10: 2 Stop bits
	11: 1.5 Stop bit
	The 0.5 Stop bit and 1.5 Stop bit are not available for UART4 & UART5.*/

	USART[Huart->USART_SELECTION]->CR2 |= (Huart->STOP_BITS) ;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <USART_Init+0x220>)
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	89db      	ldrh	r3, [r3, #14]
 8000faa:	4619      	mov	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <USART_Init+0x220>)
 8000fb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	611a      	str	r2, [r3, #16]
	1: RTS interrupt enabled, data is only requested when there is space in the receive buffer.
	The transmission of data is expected to cease after the current character has been
	transmitted. The RTS output is asserted (tied to 0) when a data can be received.
	This bit is not available for UART4 & UART5.*/

	USART[Huart->USART_SELECTION]->CR3 |= (Huart->HwFlowCtl) ;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <USART_Init+0x220>)
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	8a1b      	ldrh	r3, [r3, #16]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	; (80010d0 <USART_Init+0x220>)
 8000fd8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
	/*Switch USART TO Switch PCLCK*/
	/**
	 * USART1 		   --> PCLCK2
	 * USART2 | USART3 --> PCLCK1
	 */
	switch (Huart->USART_SELECTION)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d01a      	beq.n	800101e <USART_Init+0x16e>
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	dc22      	bgt.n	8001032 <USART_Init+0x182>
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <USART_Init+0x146>
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00a      	beq.n	800100a <USART_Init+0x15a>
 8000ff4:	e01d      	b.n	8001032 <USART_Init+0x182>
	{
	case USART_ONE   :     RCC_USART1_CLCK_EN();
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <USART_Init+0x21c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a34      	ldr	r2, [pc, #208]	; (80010cc <USART_Init+0x21c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6193      	str	r3, [r2, #24]
	LocalU32_PCLCKValue = RCC_GetPCLCK2()    ;break;
 8001002:	f7ff fe25 	bl	8000c50 <RCC_GetPCLCK2>
 8001006:	6138      	str	r0, [r7, #16]
 8001008:	e016      	b.n	8001038 <USART_Init+0x188>
	case USART_TWO   :     RCC_USART2_CLCK_EN();
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <USART_Init+0x21c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <USART_Init+0x21c>)
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	61d3      	str	r3, [r2, #28]
	LocalU32_PCLCKValue = RCC_GetPCLCK1();   ;break;
 8001016:	f7ff fe07 	bl	8000c28 <RCC_GetPCLCK1>
 800101a:	6138      	str	r0, [r7, #16]
 800101c:	e00c      	b.n	8001038 <USART_Init+0x188>
	case USART_THREE :     RCC_USART3_CLCK_EN();
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <USART_Init+0x21c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <USART_Init+0x21c>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001028:	61d3      	str	r3, [r2, #28]
	LocalU32_PCLCKValue = RCC_GetPCLCK1();   ;break;
 800102a:	f7ff fdfd 	bl	8000c28 <RCC_GetPCLCK1>
 800102e:	6138      	str	r0, [r7, #16]
 8001030:	e002      	b.n	8001038 <USART_Init+0x188>
	default :  LocalErrorStatue = NOK ; break;
 8001032:	2301      	movs	r3, #1
 8001034:	75fb      	strb	r3, [r7, #23]
 8001036:	bf00      	nop
	}


	LocalU32_BRRValue = UART_BRR_Register(LocalU32_PCLCKValue ,Huart->BAUDRATE );
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	fbb2 f3f3 	udiv	r3, r2, r3
 8001044:	0119      	lsls	r1, r3, #4
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	009a      	lsls	r2, r3, #2
 8001050:	441a      	add	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fbb2 f2f3 	udiv	r2, r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	6938      	ldr	r0, [r7, #16]
 8001064:	fbb0 f3f3 	udiv	r3, r0, r3
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	fb00 f303 	mul.w	r3, r0, r3
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <USART_Init+0x224>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	430b      	orrs	r3, r1
 8001080:	60fb      	str	r3, [r7, #12]

	USART[Huart->USART_SELECTION]->BRR = LocalU32_BRRValue ;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <USART_Init+0x220>)
 800108a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	609a      	str	r2, [r3, #8]


	/************************ Interrupt **************************/

	if(Huart->IRQ_USART_Enable !=USART_IRQ_Enable_NONE )
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8a5b      	ldrh	r3, [r3, #18]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d011      	beq.n	80010be <USART_Init+0x20e>
	{

		USART[Huart->USART_SELECTION]->CR1 |= (Huart->IRQ_USART_Enable );
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <USART_Init+0x220>)
 80010a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	8a5b      	ldrh	r3, [r3, #18]
 80010ac:	4619      	mov	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <USART_Init+0x220>)
 80010b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	60da      	str	r2, [r3, #12]
	{
		/*unable Interrupt*/
	}


	return LocalErrorStatue ;
 80010be:	7dfb      	ldrb	r3, [r7, #23]

}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000094 	.word	0x20000094
 80010cc:	40021000 	.word	0x40021000
 80010d0:	20000024 	.word	0x20000024
 80010d4:	51eb851f 	.word	0x51eb851f

080010d8 <USART_U16SendData>:
 *
 * Return:	UART_ERR_Statue , Type:enum
 *
 ******************************************************************************/
UART_ERR_Statue USART_U16SendData( USART_TypeDef_S* Huart, uint16_t *PTxBuffre ,USART_Polling_Mechanism_E Polling_Status)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	4613      	mov	r3, r2
 80010e4:	71fb      	strb	r3, [r7, #7]
	uint8_t LocalErrorStatue = NO_EROR;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]

	/*wait until make sure TXE =1 --> Empty (with pooling mechanism)*/
	/* Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this
	 * for each data to be transmitted in case of single buffer */
	if(Polling_Status == USART_POLLING_ENABLE)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d106      	bne.n	80010fe <USART_U16SendData+0x26>
	{
		/*Polling in TXE Bit*/
		while(! (Huart->SR & 1<<TXE_BIT));
 80010f0:	bf00      	nop
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f9      	beq.n	80010f2 <USART_U16SendData+0x1a>
	When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	because it is replaced by the parity.
	When receiving with the parity enabled, the value read in the MSB bit is the received parity
	bit.*/
	if(Global_USART_CONFIG->USART_DATA_PAYLOAD == USART_9DATA_BITS)
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <USART_U16SendData+0x60>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	88db      	ldrh	r3, [r3, #6]
 8001104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001108:	d106      	bne.n	8001118 <USART_U16SendData+0x40>
	{
		/*ignore the nine bit of Date Configured as parity*/
		Huart->DR =(*PTxBuffre & (uint16_t)0x01FF);
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	e009      	b.n	800112c <USART_U16SendData+0x54>

	}
	else if (Global_USART_CONFIG->USART_DATA_PAYLOAD == USART_8DATA_BITS)
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <USART_U16SendData+0x60>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	88db      	ldrh	r3, [r3, #6]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d104      	bne.n	800112c <USART_U16SendData+0x54>
	{
		/*ignore the eight bit of Date Configured as parity*/
		Huart->DR =(*PTxBuffre & (uint8_t)0xFF);
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	605a      	str	r2, [r3, #4]

	}


	return LocalErrorStatue ;
 800112c:	7dfb      	ldrb	r3, [r7, #23]
}
 800112e:	4618      	mov	r0, r3
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	20000094 	.word	0x20000094

0800113c <main>:
void Ahmed_SPI1_Handler(struct IRQ_SRC_S IRQ_SRC);

unsigned char CH ;

int main(void)
{
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0

	CLCK_Init();
 8001142:	f000 f83d 	bl	80011c0 <CLCK_Init>
	NVICEnable(USART1_IRQ);
 8001146:	2025      	movs	r0, #37	; 0x25
 8001148:	f7ff fcee 	bl	8000b28 <NVICEnable>
	NVICEnable(SPI1_);
 800114c:	2023      	movs	r0, #35	; 0x23
 800114e:	f7ff fceb 	bl	8000b28 <NVICEnable>


	USART_HandleTypeDef USART1CFG=
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <main+0x7c>)
 8001154:	f107 0414 	add.w	r4, r7, #20
 8001158:	461d      	mov	r5, r3
 800115a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	6023      	str	r3, [r4, #0]
			.USART_SELECTION=USART_ONE,
			.USART_STATUE=USART_ENABLE,
			.HwFlowCtl=USART_HwFlowCtl_NONE,

	};
	GPIO_USARTSetPins(USART_ONE_ID);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fa98 	bl	8000698 <GPIO_USARTSetPins>
	USART_Init(&USART1CFG);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fe9f 	bl	8000eb0 <USART_Init>




	/*Common Configuration for master or slave*/
	SPI_Config_S SPICONFIG1=
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	2302      	movs	r3, #2
 8001182:	723b      	strb	r3, [r7, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	727b      	strb	r3, [r7, #9]
 8001188:	2310      	movs	r3, #16
 800118a:	733b      	strb	r3, [r7, #12]

#endif

#ifdef MCU_ACT_SLAVE

	SPICONFIG1.DeviceMode=SPI_Mode_Slave;
 800118c:	2300      	movs	r3, #0
 800118e:	707b      	strb	r3, [r7, #1]
	SPICONFIG1.InterruptEnable=SPI_IE_RXNEIE;
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	737b      	strb	r3, [r7, #13]
	SPICONFIG1.SPI_PtrCallBack= Ahmed_SPI1_Handler;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <main+0x80>)
 8001196:	613b      	str	r3, [r7, #16]
	SPICONFIG1.NSSConfig=SPI_NSS_HW_Slave;
 8001198:	2300      	movs	r3, #0
 800119a:	817b      	strh	r3, [r7, #10]
	GPIO_SPISetPins(SPI_ONE_ID, SPI_SLAVE_ID, SPI_NSS_HW_MASTER_SS_OP_DISABLE);
 800119c:	2200      	movs	r2, #0
 800119e:	2101      	movs	r1, #1
 80011a0:	2003      	movs	r0, #3
 80011a2:	f7ff fb19 	bl	80007d8 <GPIO_SPISetPins>
#endif


	SPI_Init(&SPICONFIG1);
 80011a6:	463b      	mov	r3, r7
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fd65 	bl	8000c78 <SPI_Init>

	NVIC_SetPendingFlag(SPI1_);
 80011ae:	2023      	movs	r0, #35	; 0x23
 80011b0:	f7ff fcde 	bl	8000b70 <NVIC_SetPendingFlag>
	while(1)
 80011b4:	e7fe      	b.n	80011b4 <main+0x78>
 80011b6:	bf00      	nop
 80011b8:	08001310 	.word	0x08001310
 80011bc:	08001219 	.word	0x08001219

080011c0 <CLCK_Init>:
	for(;;);

}

void CLCK_Init()
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLCK_EN();
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <CLCK_Init+0x48>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <CLCK_Init+0x48>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLCK_EN();
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <CLCK_Init+0x48>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <CLCK_Init+0x48>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6193      	str	r3, [r2, #24]

	AFIO_GPIOA_CLCK_EN();
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <CLCK_Init+0x48>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <CLCK_Init+0x48>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6193      	str	r3, [r2, #24]

	RCC_USART1_CLCK_EN();
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <CLCK_Init+0x48>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <CLCK_Init+0x48>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f2:	6193      	str	r3, [r2, #24]

	SPI1_CLCK_EN();
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <CLCK_Init+0x48>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <CLCK_Init+0x48>)
 80011fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fe:	6193      	str	r3, [r2, #24]



}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40021000 	.word	0x40021000

0800120c <USART1_IRQHandler>:


void USART1_IRQHandler()
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(PORTA, PIN4, GPIO_PINLOW);
	SPI_U16TXRX(SPI1, &CH, Polling_Enable);
	GPIO_u8SetPinValue(PORTA, PIN4, GPIO_PINHIGH);

#endif
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <Ahmed_SPI1_Handler>:

void Ahmed_SPI1_Handler(struct IRQ_SRC_S IRQ_SRC)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	7138      	strb	r0, [r7, #4]
#ifdef MCU_ACT_SLAVE

	if(IRQ_SRC.RXNE )
 8001220:	793b      	ldrb	r3, [r7, #4]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <Ahmed_SPI1_Handler+0x2e>
	{
		CH = 0xf ;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <Ahmed_SPI1_Handler+0x38>)
 800122e:	220f      	movs	r2, #15
 8001230:	701a      	strb	r2, [r3, #0]
		SPI_U16TXRX(SPI1, &CH, Polling_Disable);
 8001232:	2200      	movs	r2, #0
 8001234:	4906      	ldr	r1, [pc, #24]	; (8001250 <Ahmed_SPI1_Handler+0x38>)
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <Ahmed_SPI1_Handler+0x3c>)
 8001238:	f7ff fdb0 	bl	8000d9c <SPI_U16TXRX>
		USART_U16SendData(USART1, &CH, USART_POLLING_ENABLE);
 800123c:	2201      	movs	r2, #1
 800123e:	4904      	ldr	r1, [pc, #16]	; (8001250 <Ahmed_SPI1_Handler+0x38>)
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <Ahmed_SPI1_Handler+0x40>)
 8001242:	f7ff ff49 	bl	80010d8 <USART_U16SendData>

	}

#endif
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000098 	.word	0x20000098
 8001254:	40013000 	.word	0x40013000
 8001258:	40013800 	.word	0x40013800

0800125c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800128a:	f000 f811 	bl	80012b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128e:	f7ff ff55 	bl	800113c <main>

08001292 <LoopForever>:

LoopForever:
  b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   r0, =_estack
 8001294:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80012a0:	08001344 	.word	0x08001344
  ldr r2, =_sbss
 80012a4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80012a8:	2000009c 	.word	0x2000009c

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <__libc_init_array>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	2600      	movs	r6, #0
 80012b4:	4d0c      	ldr	r5, [pc, #48]	; (80012e8 <__libc_init_array+0x38>)
 80012b6:	4c0d      	ldr	r4, [pc, #52]	; (80012ec <__libc_init_array+0x3c>)
 80012b8:	1b64      	subs	r4, r4, r5
 80012ba:	10a4      	asrs	r4, r4, #2
 80012bc:	42a6      	cmp	r6, r4
 80012be:	d109      	bne.n	80012d4 <__libc_init_array+0x24>
 80012c0:	f000 f81a 	bl	80012f8 <_init>
 80012c4:	2600      	movs	r6, #0
 80012c6:	4d0a      	ldr	r5, [pc, #40]	; (80012f0 <__libc_init_array+0x40>)
 80012c8:	4c0a      	ldr	r4, [pc, #40]	; (80012f4 <__libc_init_array+0x44>)
 80012ca:	1b64      	subs	r4, r4, r5
 80012cc:	10a4      	asrs	r4, r4, #2
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d105      	bne.n	80012de <__libc_init_array+0x2e>
 80012d2:	bd70      	pop	{r4, r5, r6, pc}
 80012d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80012d8:	4798      	blx	r3
 80012da:	3601      	adds	r6, #1
 80012dc:	e7ee      	b.n	80012bc <__libc_init_array+0xc>
 80012de:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e2:	4798      	blx	r3
 80012e4:	3601      	adds	r6, #1
 80012e6:	e7f2      	b.n	80012ce <__libc_init_array+0x1e>
 80012e8:	0800133c 	.word	0x0800133c
 80012ec:	0800133c 	.word	0x0800133c
 80012f0:	0800133c 	.word	0x0800133c
 80012f4:	08001340 	.word	0x08001340

080012f8 <_init>:
 80012f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fa:	bf00      	nop
 80012fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012fe:	bc08      	pop	{r3}
 8001300:	469e      	mov	lr, r3
 8001302:	4770      	bx	lr

08001304 <_fini>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	bf00      	nop
 8001308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130a:	bc08      	pop	{r3}
 800130c:	469e      	mov	lr, r3
 800130e:	4770      	bx	lr
