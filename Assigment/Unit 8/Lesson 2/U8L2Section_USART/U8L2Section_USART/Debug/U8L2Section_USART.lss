
U8L2Section_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000030c  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012eb  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098b  00000000  00000000  00001823  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd1  00000000  00000000  000021ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  00002d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f3  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e79  00000000  00000000  00003737  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000045b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 39 01 	call	0x272	; 0x272 <main>
  8a:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SendEnablePulse>:
#include "CLCD_config.h"


static void SendEnablePulse()
{
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN,DIO_u8_PIN_HIGH);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	83 ef       	ldi	r24, 0xF3	; 243
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <SendEnablePulse+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <SendEnablePulse+0x14>
  a6:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN,DIO_u8_PIN_LOW);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>
  b2:	08 95       	ret

000000b4 <SetHalfDataPins>:
}


static void SetHalfDataPins(uint8 Copy_u8Data)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN4,GET_BIT(Copy_u8Data,0));
  b8:	48 2f       	mov	r20, r24
  ba:	41 70       	andi	r20, 0x01	; 1
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN5,GET_BIT(Copy_u8Data,1));
  c4:	c1 fb       	bst	r28, 1
  c6:	44 27       	eor	r20, r20
  c8:	40 f9       	bld	r20, 0
  ca:	65 e0       	ldi	r22, 0x05	; 5
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN6,GET_BIT(Copy_u8Data,2));
  d2:	c2 fb       	bst	r28, 2
  d4:	44 27       	eor	r20, r20
  d6:	40 f9       	bld	r20, 0
  d8:	66 e0       	ldi	r22, 0x06	; 6
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN7,GET_BIT(Copy_u8Data,3));
  e0:	c3 fb       	bst	r28, 3
  e2:	44 27       	eor	r20, r20
  e4:	40 f9       	bld	r20, 0
  e6:	67 e0       	ldi	r22, 0x07	; 7
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>
	SendEnablePulse();
  ee:	0e 94 49 00 	call	0x92	; 0x92 <SendEnablePulse>
}
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <CLCD_voidSendCommand>:




void CLCD_voidSendCommand(uint8 Copy_u8Command)
{
  f6:	cf 93       	push	r28
  f8:	c8 2f       	mov	r28, r24
	//Set RS pin to low to command
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN,DIO_u8_PIN_LOW);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>

	//Set RW pin to low to write
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN,DIO_u8_PIN_LOW);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>
	SendEnablePulse(void);

#elif CLCD_u8_MODE ==FOUR_BIT

	//Four Most Pins
	SetHalfDataPins(Copy_u8Command>>4);
 10e:	8c 2f       	mov	r24, r28
 110:	82 95       	swap	r24
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	0e 94 5a 00 	call	0xb4	; 0xb4 <SetHalfDataPins>

	//Four Least Pins
	SetHalfDataPins(Copy_u8Command);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 5a 00 	call	0xb4	; 0xb4 <SetHalfDataPins>

#endif

}
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <CLCD_voidSendData>:
void CLCD_voidSendData(uint8 Copy_u8Data)
{
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
	//Set RS pin to high for data
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN,DIO_u8_PIN_HIGH);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>

	//Set RW pin to low for write
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN,DIO_u8_PIN_LOW);
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_u8SetPinValue>
	SendEnablePulse();

#elif CLCD_u8_MODE ==FOUR_BIT

	//Four Most Pins
	SetHalfDataPins(Copy_u8Data>>4);
 13a:	8c 2f       	mov	r24, r28
 13c:	82 95       	swap	r24
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	0e 94 5a 00 	call	0xb4	; 0xb4 <SetHalfDataPins>

	//Four Least Pins
	SetHalfDataPins(Copy_u8Data);
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 5a 00 	call	0xb4	; 0xb4 <SetHalfDataPins>

#endif

}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <CLCD_voidInit>:
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	97 e2       	ldi	r25, 0x27	; 39
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <CLCD_voidInit+0x4>
 156:	00 c0       	rjmp	.+0      	; 0x158 <CLCD_voidInit+0xa>
 158:	00 00       	nop
#if CLCD_u8_MODE == EIGHT_BIT
	//Function Set Command : 2 lines , font size : 5x7
	CLCD_voidSendCommand(0b00111000);
	
#elif CLCD_u8_MODE ==FOUR_BIT
	SetHalfDataPins(0b0010);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 5a 00 	call	0xb4	; 0xb4 <SetHalfDataPins>
	SetHalfDataPins(0b0010);
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 5a 00 	call	0xb4	; 0xb4 <SetHalfDataPins>
	SetHalfDataPins(0b1000);
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	0e 94 5a 00 	call	0xb4	; 0xb4 <SetHalfDataPins>

#endif

	// Function Set command : enable Display , Cursor off , Blink Cursor off
	CLCD_voidSendCommand(0b00001111);
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	0e 94 7b 00 	call	0xf6	; 0xf6 <CLCD_voidSendCommand>

	//Clear LCD
	CLCD_voidSendCommand(1);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 7b 00 	call	0xf6	; 0xf6 <CLCD_voidSendCommand>
 178:	08 95       	ret

0000017a <CLCD_voidSendString>:
}

void CLCD_voidSendString(char Copy_u8DataString[])
{
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	8c 01       	movw	r16, r24
	uint8 string_u8count = 0;
 182:	c0 e0       	ldi	r28, 0x00	; 0
	while (Copy_u8DataString[string_u8count] != '\0')
 184:	03 c0       	rjmp	.+6      	; 0x18c <CLCD_voidSendString+0x12>
	{
		CLCD_voidSendData(Copy_u8DataString[string_u8count]);
 186:	0e 94 91 00 	call	0x122	; 0x122 <CLCD_voidSendData>
		string_u8count++;
 18a:	cf 5f       	subi	r28, 0xFF	; 255
}

void CLCD_voidSendString(char Copy_u8DataString[])
{
	uint8 string_u8count = 0;
	while (Copy_u8DataString[string_u8count] != '\0')
 18c:	f8 01       	movw	r30, r16
 18e:	ec 0f       	add	r30, r28
 190:	f1 1d       	adc	r31, r1
 192:	80 81       	ld	r24, Z
 194:	81 11       	cpse	r24, r1
 196:	f7 cf       	rjmp	.-18     	; 0x186 <CLCD_voidSendString+0xc>
	{
		CLCD_voidSendData(Copy_u8DataString[string_u8count]);
		string_u8count++;
	}
}
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	08 95       	ret

000001a0 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;

	if((Copy_u8PinNum<= DIO_u8_PIN7) && (Copy_u8Val<= DIO_u8_PIN_HIGH))
 1a0:	68 30       	cpi	r22, 0x08	; 8
 1a2:	08 f0       	brcs	.+2      	; 0x1a6 <DIO_u8SetPinValue+0x6>
 1a4:	60 c0       	rjmp	.+192    	; 0x266 <DIO_u8SetPinValue+0xc6>
 1a6:	42 30       	cpi	r20, 0x02	; 2
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <DIO_u8SetPinValue+0xc>
 1aa:	5f c0       	rjmp	.+190    	; 0x26a <DIO_u8SetPinValue+0xca>
	{
		switch(Copy_u8Port)
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	e1 f0       	breq	.+56     	; 0x1e8 <DIO_u8SetPinValue+0x48>
 1b0:	30 f0       	brcs	.+12     	; 0x1be <DIO_u8SetPinValue+0x1e>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	71 f1       	breq	.+92     	; 0x212 <DIO_u8SetPinValue+0x72>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_u8SetPinValue+0x1c>
 1ba:	40 c0       	rjmp	.+128    	; 0x23c <DIO_u8SetPinValue+0x9c>
 1bc:	58 c0       	rjmp	.+176    	; 0x26e <DIO_u8SetPinValue+0xce>
		{
		case DIO_u8_PORTA: ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
 1be:	2b b3       	in	r18, 0x1b	; 27
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	06 2e       	mov	r0, r22
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_u8SetPinValue+0x2c>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_u8SetPinValue+0x28>
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_u8SetPinValue+0x38>
 1d4:	44 0f       	add	r20, r20
 1d6:	55 1f       	adc	r21, r21
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_u8SetPinValue+0x34>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	48 2b       	or	r20, r24
 1e2:	4b bb       	out	0x1b, r20	; 27
#include "DIO_private.h"
#include "DIO_config.h"

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 1e4:	80 e0       	ldi	r24, 0x00	; 0

	if((Copy_u8PinNum<= DIO_u8_PIN7) && (Copy_u8Val<= DIO_u8_PIN_HIGH))
	{
		switch(Copy_u8Port)
		{
		case DIO_u8_PORTA: ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
 1e6:	08 95       	ret
		case DIO_u8_PORTB: ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	06 2e       	mov	r0, r22
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_u8SetPinValue+0x56>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_u8SetPinValue+0x52>
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_u8SetPinValue+0x62>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_u8SetPinValue+0x5e>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	48 2b       	or	r20, r24
 20c:	48 bb       	out	0x18, r20	; 24
#include "DIO_private.h"
#include "DIO_config.h"

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
	if((Copy_u8PinNum<= DIO_u8_PIN7) && (Copy_u8Val<= DIO_u8_PIN_HIGH))
	{
		switch(Copy_u8Port)
		{
		case DIO_u8_PORTA: ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTB: ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
 210:	08 95       	ret
		case DIO_u8_PORTC: ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
 212:	25 b3       	in	r18, 0x15	; 21
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	06 2e       	mov	r0, r22
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinValue+0x80>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinValue+0x7c>
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_u8SetPinValue+0x8c>
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_u8SetPinValue+0x88>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	48 2b       	or	r20, r24
 236:	45 bb       	out	0x15, r20	; 21
#include "DIO_private.h"
#include "DIO_config.h"

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 238:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Copy_u8Port)
		{
		case DIO_u8_PORTA: ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTB: ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTC: ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
 23a:	08 95       	ret
		case DIO_u8_PORTD: ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	06 2e       	mov	r0, r22
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinValue+0xaa>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinValue+0xa6>
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_u8SetPinValue+0xb6>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_u8SetPinValue+0xb2>
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	48 2b       	or	r20, r24
 260:	42 bb       	out	0x12, r20	; 18
#include "DIO_private.h"
#include "DIO_config.h"

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
	uint8 Local_u8ErrorState = OK;
 262:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8Port)
		{
		case DIO_u8_PORTA: ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTB: ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTC: ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTD: ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
 264:	08 95       	ret
		default: Local_u8ErrorState= NOK; break;
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	08 95       	ret
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
		{
		case DIO_u8_PORTA: ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTB: ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTC: ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
		case DIO_u8_PORTD: ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
		default: Local_u8ErrorState= NOK; break;
 26e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState = NOK;
	}
	return Local_u8ErrorState;
}
 270:	08 95       	ret

00000272 <main>:
#include "USART_interface.h"

int main(void)
{
	
	PORT_voidInit();
 272:	0e 94 53 01 	call	0x2a6	; 0x2a6 <PORT_voidInit>
	CLCD_voidInit();
 276:	0e 94 a7 00 	call	0x14e	; 0x14e <CLCD_voidInit>
	
	USART_VoidInit();
 27a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <USART_VoidInit>
	
	uint8_t Data = 0 ;

    /* Replace with your application code */
	CLCD_voidSendString("USARTTEST");
 27e:	80 e6       	ldi	r24, 0x60	; 96
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 bd 00 	call	0x17a	; 0x17a <CLCD_voidSendString>
 286:	2f e3       	ldi	r18, 0x3F	; 63
 288:	8d e0       	ldi	r24, 0x0D	; 13
 28a:	93 e0       	ldi	r25, 0x03	; 3
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x1a>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x24>
 296:	00 00       	nop
	_delay_ms(1000);
	CLCD_voidSendCommand(0x01);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 7b 00 	call	0xf6	; 0xf6 <CLCD_voidSendCommand>
	USART_u8SendData('Ahmed Maher');
 29e:	82 e7       	ldi	r24, 0x72	; 114
 2a0:	0e 94 80 01 	call	0x300	; 0x300 <USART_u8SendData>
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <main+0x32>

000002a6 <PORT_voidInit>:
#include "PORT_reg.h"
#include "PORT_Interface.h"
#include "PORT_private.h"
void PORT_voidInit(void)
{ 
DDRA=PORTA_DIR;
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	8a bb       	out	0x1a, r24	; 26
DDRB=PORTB_DIR;
 2aa:	8e e0       	ldi	r24, 0x0E	; 14
 2ac:	87 bb       	out	0x17, r24	; 23
DDRC=PORTC_DIR;
 2ae:	14 ba       	out	0x14, r1	; 20
DDRD=PORTD_DIR;
 2b0:	11 ba       	out	0x11, r1	; 17

PORTA =PORTA_INITIAL_VALUE;
 2b2:	1b ba       	out	0x1b, r1	; 27
PORTB =PORTB_INITIAL_VALUE;
 2b4:	18 ba       	out	0x18, r1	; 24
PORTC =PORTC_INITIAL_VALUE;
 2b6:	15 ba       	out	0x15, r1	; 21
PORTD= PORTD_INITIAL_VALUE;
 2b8:	12 ba       	out	0x12, r1	; 18
 2ba:	08 95       	ret

000002bc <USART_VoidInit>:
#include "USART_reg.h"

char StringData[50];
void USART_VoidInit(void)
{
	CLR_BIT(UCSRA,U2X);   // Normal Speed	
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	8d 7f       	andi	r24, 0xFD	; 253
 2c0:	8b b9       	out	0x0b, r24	; 11
	// BaudRate 9600 F_cpu = 8MHZ
	UBRRH = 0;
 2c2:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
 2c4:	83 e3       	ldi	r24, 0x33	; 51
 2c6:	89 b9       	out	0x09, r24	; 9
	
	//Asynchronous mode
	CLR_BIT(UCSRC,UMSEL);
 2c8:	80 b5       	in	r24, 0x20	; 32
 2ca:	8f 7b       	andi	r24, 0xBF	; 191
 2cc:	80 bd       	out	0x20, r24	; 32
	
	//B- 8-Bit data
	SET_BIT(UCSRC,UCSZ0);
 2ce:	80 b5       	in	r24, 0x20	; 32
 2d0:	82 60       	ori	r24, 0x02	; 2
 2d2:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ1);
 2d4:	80 b5       	in	r24, 0x20	; 32
 2d6:	84 60       	ori	r24, 0x04	; 4
 2d8:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRB,UCSZ2);
 2da:	8a b1       	in	r24, 0x0a	; 10
 2dc:	8b 7f       	andi	r24, 0xFB	; 251
 2de:	8a b9       	out	0x0a, r24	; 10
	
	//NO parity
	CLR_BIT(UCSRC,UPM0);
 2e0:	80 b5       	in	r24, 0x20	; 32
 2e2:	8f 7e       	andi	r24, 0xEF	; 239
 2e4:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRC,UPM1);
 2e6:	80 b5       	in	r24, 0x20	; 32
 2e8:	8f 7d       	andi	r24, 0xDF	; 223
 2ea:	80 bd       	out	0x20, r24	; 32
	
	// One stop bit
	CLR_BIT(UCSRC,USBS);
 2ec:	80 b5       	in	r24, 0x20	; 32
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	80 bd       	out	0x20, r24	; 32
	
	//enable UART  receiver.
	SET_BIT(UCSRB,RXEN);
 2f2:	8a b1       	in	r24, 0x0a	; 10
 2f4:	80 61       	ori	r24, 0x10	; 16
 2f6:	8a b9       	out	0x0a, r24	; 10

	//enable UART  transmitter .
	SET_BIT(UCSRB,TXEN);
 2f8:	8a b1       	in	r24, 0x0a	; 10
 2fa:	88 60       	ori	r24, 0x08	; 8
 2fc:	8a b9       	out	0x0a, r24	; 10
 2fe:	08 95       	ret

00000300 <USART_u8SendData>:
}

void USART_u8SendData(uint8_t data )
{	while(!(GET_BIT(UCSRA,UDRE)));
 300:	5d 9b       	sbis	0x0b, 5	; 11
 302:	fe cf       	rjmp	.-4      	; 0x300 <USART_u8SendData>
	UDR = data;
 304:	8c b9       	out	0x0c, r24	; 12
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
